
timer3_OC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004400  08004400  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004400  08004400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004408  08004408  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004408  08004408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800440c  0800440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08004478  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004478  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c947  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5d  00000000  00000000  000129df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00014640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009af  00000000  00000000  000152a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170ad  00000000  00000000  00015c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d603  00000000  00000000  0002cd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff19  00000000  00000000  0003a307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca220  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  000ca264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cde50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004378 	.word	0x08004378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004378 	.word	0x08004378

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fbe6 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f832 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f93c 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f910 	bl	80007e0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80005c0:	f000 f896 	bl	80006f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("Main Start!!\r\n");
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <main+0x5c>)
 80005c6:	f003 f875 	bl	80036b4 <puts>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80005ca:	4810      	ldr	r0, [pc, #64]	@ (800060c <main+0x60>)
 80005cc:	f001 fbfc 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <main+0x2e>
	  Error_Handler();
 80005d6:	f000 f9e1 	bl	800099c <Error_Handler>
  if(HAL_TIM_OC_Start_IT(&htim3,TIM_CHANNEL_1) != HAL_OK)
 80005da:	2100      	movs	r1, #0
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <main+0x60>)
 80005de:	f001 fcaf 	bl	8001f40 <HAL_TIM_OC_Start_IT>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x40>
	  Error_Handler();
 80005e8:	f000 f9d8 	bl	800099c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(time3SecFlag)
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <main+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0fb      	beq.n	80005ec <main+0x40>
	  {
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
		  time3SecFlag = 0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <main+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
		  printf("time3Seccnt : %d\r\n",time3SecCnt);
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <main+0x68>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <main+0x6c>)
 8000602:	f002 ffef 	bl	80035e4 <iprintf>
	  if(time3SecFlag)
 8000606:	e7f1      	b.n	80005ec <main+0x40>
 8000608:	08004390 	.word	0x08004390
 800060c:	20000084 	.word	0x20000084
 8000610:	20000114 	.word	0x20000114
 8000614:	20000118 	.word	0x20000118
 8000618:	080043a0 	.word	0x080043a0

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 f922 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000694:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fea8 	bl	80013f8 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 f975 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f90a 	bl	80018e8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 f95f 	bl	800099c <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	@ 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	@ 0x38
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000720:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000722:	4a2e      	ldr	r2, [pc, #184]	@ (80007dc <MX_TIM3_Init+0xec>)
 8000724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000728:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800072c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000734:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000736:	f242 720f 	movw	r2, #9999	@ 0x270f
 800073a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000748:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 800074a:	f001 faed 	bl	8001d28 <HAL_TIM_Base_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000754:	f000 f922 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800075e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000762:	4619      	mov	r1, r3
 8000764:	481c      	ldr	r0, [pc, #112]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000766:	f001 fe35 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000770:	f000 f914 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000774:	4818      	ldr	r0, [pc, #96]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000776:	f001 fb89 	bl	8001e8c <HAL_TIM_OC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000780:	f000 f90c 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4619      	mov	r1, r3
 8000792:	4811      	ldr	r0, [pc, #68]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 8000794:	f002 f9d6 	bl	8002b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800079e:	f000 f8fd 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007a2:	2330      	movs	r3, #48	@ 0x30
 80007a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 80007a6:	f241 3387 	movw	r3, #4999	@ 0x1387
 80007aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 80007bc:	f001 fdae 	bl	800231c <HAL_TIM_OC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80007c6:	f000 f8e9 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_TIM3_Init+0xe8>)
 80007cc:	f000 f93c 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	@ 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40000400 	.word	0x40000400

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f002 fa16 	bl	8002c48 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f8bb 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000cc 	.word	0x200000cc
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a2c      	ldr	r2, [pc, #176]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b23      	ldr	r3, [pc, #140]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <MX_GPIO_Init+0xd0>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <MX_GPIO_Init+0xd0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	4812      	ldr	r0, [pc, #72]	@ (8000908 <MX_GPIO_Init+0xd4>)
 80008c0:	f000 fd66 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_GPIO_Init+0xd8>)
 80008dc:	f000 fbd4 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e0:	2320      	movs	r3, #32
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_GPIO_Init+0xd4>)
 80008f8:	f000 fbc6 	bl	8001088 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	@ 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000
 800090c:	40020800 	.word	0x40020800

08000910 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	2201      	movs	r2, #1
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <__io_putchar+0x20>)
 8000922:	f002 f9e1 	bl	8002ce8 <HAL_UART_Transmit>

  return ch;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000cc 	.word	0x200000cc

08000934 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d107      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		time3SecCnt++;
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800094e:	6013      	str	r3, [r2, #0]
		time3SecFlag=1;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
//		HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
	}
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40000400 	.word	0x40000400
 8000968:	20000118 	.word	0x20000118
 800096c:	20000114 	.word	0x20000114

08000970 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d103      	bne.n	800098a <HAL_TIM_OC_DelayElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8000982:	2120      	movs	r1, #32
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000986:	f000 fd1c 	bl	80013c2 <HAL_GPIO_TogglePin>
	}
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40000400 	.word	0x40000400
 8000998:	40020000 	.word	0x40020000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e6:	2007      	movs	r0, #7
 80009e8:	f000 fb0c 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d115      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a0c      	ldr	r2, [pc, #48]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <HAL_TIM_Base_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201d      	movs	r0, #29
 8000a2c:	f000 faf5 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a30:	201d      	movs	r0, #29
 8000a32:	f000 fb0e 	bl	8001052 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40000400 	.word	0x40000400
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <HAL_TIM_MspPostInit+0x68>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d11d      	bne.n	8000aa6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_TIM_MspPostInit+0x6c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_TIM_MspPostInit+0x70>)
 8000aa2:	f000 faf1 	bl	8001088 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3720      	adds	r7, #32
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f000 faa9 	bl	8001088 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <NMI_Handler+0x4>

08000b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <MemManage_Handler+0x4>

08000b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f93f 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <TIM3_IRQHandler+0x10>)
 8000bb2:	f001 fac3 	bl	800213c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000084 	.word	0x20000084

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fe7b 	bl	8000910 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f002 fe20 	bl	8003910 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	2000011c 	.word	0x2000011c
 8000d04:	20000270 	.word	0x20000270

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f002 fddf 	bl	800391c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc25 	bl	80005ac <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d70:	08004410 	.word	0x08004410
  ldr r2, =_sbss
 8000d74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d78:	20000270 	.word	0x20000270

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f92b 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fdf8 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f943 	bl	800106e <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f90b 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000004 	.word	0x20000004

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000120 	.word	0x20000120

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000120 	.word	0x20000120

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e159      	b.n	8001358 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8148 	bne.w	8001352 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a2 	beq.w	8001352 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a56      	ldr	r2, [pc, #344]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <HAL_GPIO_Init+0x2ec>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <HAL_GPIO_Init+0x2f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x202>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1fe>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2f8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_GPIO_Init+0x2fc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1f6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a45      	ldr	r2, [pc, #276]	@ (8001388 <HAL_GPIO_Init+0x300>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1f2>
 8001276:	2304      	movs	r3, #4
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127a:	2307      	movs	r3, #7
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x204>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <HAL_GPIO_Init+0x2ec>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a24      	ldr	r2, [pc, #144]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_GPIO_Init+0x304>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_GPIO_Init+0x304>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f aea2 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	041a      	lsls	r2, r3, #16
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43d9      	mvns	r1, r3
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	400b      	ands	r3, r1
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e267      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800142a:	2b08      	cmp	r3, #8
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b7e      	ldr	r3, [pc, #504]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e242      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4b76      	ldr	r3, [pc, #472]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b70      	ldr	r3, [pc, #448]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6f      	ldr	r2, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6d      	ldr	r3, [pc, #436]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6c      	ldr	r2, [pc, #432]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a68      	ldr	r2, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fccc 	bl	8000e4c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcc8 	bl	8000e4c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e207      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcb8 	bl	8000e4c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcb4 	bl	8000e4c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1f3      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800150e:	4b4a      	ldr	r3, [pc, #296]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c7      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fc6d 	bl	8000e4c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc69 	bl	8000e4c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a8      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4925      	ldr	r1, [pc, #148]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc4c 	bl	8000e4c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc48 	bl	8000e4c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e187      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d036      	beq.n	8001650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d016      	beq.n	8001618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc2c 	bl	8000e4c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc28 	bl	8000e4c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e167      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
 8001616:	e01b      	b.n	8001650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fc15 	bl	8000e4c <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e00e      	b.n	8001644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fc11 	bl	8000e4c <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d907      	bls.n	8001644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e150      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001638:	40023800 	.word	0x40023800
 800163c:	42470000 	.word	0x42470000
 8001640:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8097 	beq.w	800178c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b81      	ldr	r3, [pc, #516]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b7d      	ldr	r3, [pc, #500]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a7c      	ldr	r2, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b7a      	ldr	r3, [pc, #488]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b77      	ldr	r3, [pc, #476]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b74      	ldr	r3, [pc, #464]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a73      	ldr	r2, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fbd1 	bl	8000e4c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fbcd 	bl	8000e4c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e10c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b6a      	ldr	r3, [pc, #424]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2ea>
 80016d4:	4b64      	ldr	r3, [pc, #400]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	4a63      	ldr	r2, [pc, #396]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x30c>
 80016ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	@ 0x70
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 8001704:	4b58      	ldr	r3, [pc, #352]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a57      	ldr	r2, [pc, #348]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a54      	ldr	r2, [pc, #336]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fb92 	bl	8000e4c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb8e 	bl	8000e4c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0cb      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ee      	beq.n	800172c <HAL_RCC_OscConfig+0x334>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fb7c 	bl	8000e4c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb78 	bl	8000e4c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0b5      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	4b3e      	ldr	r3, [pc, #248]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ee      	bne.n	8001758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a1 	beq.w	80018d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001796:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d05c      	beq.n	800185c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d141      	bne.n	800182e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb4c 	bl	8000e4c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fb48 	bl	8000e4c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e087      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	491b      	ldr	r1, [pc, #108]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fb21 	bl	8000e4c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fb1d 	bl	8000e4c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e05c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x416>
 800182c:	e054      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb0a 	bl	8000e4c <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fb06 	bl	8000e4c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e045      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e038      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000
 8001870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa38 	bl	8000e4c <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa34 	bl	8000e4c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f998 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	080043b4 	.word	0x080043b4
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b094      	sub	sp, #80	@ 0x50
 8001aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4b79      	ldr	r3, [pc, #484]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d00d      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f200 80e1 	bhi.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae6:	e0db      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b73      	ldr	r3, [pc, #460]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aec:	e0db      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aee:	4b73      	ldr	r3, [pc, #460]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af2:	e0d8      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	2200      	movs	r2, #0
 8001b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b26:	4622      	mov	r2, r4
 8001b28:	462b      	mov	r3, r5
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4621      	mov	r1, r4
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	6139      	str	r1, [r7, #16]
 8001b44:	4629      	mov	r1, r5
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b86:	4690      	mov	r8, r2
 8001b88:	4699      	mov	r9, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	eb18 0303 	adds.w	r3, r8, r3
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	462b      	mov	r3, r5
 8001b94:	eb49 0303 	adc.w	r3, r9, r3
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	024b      	lsls	r3, r1, #9
 8001baa:	4621      	mov	r1, r4
 8001bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	024a      	lsls	r2, r1, #9
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bc4:	f7fe fb5c 	bl	8000280 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd0:	e058      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4611      	mov	r1, r2
 8001bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bec:	4642      	mov	r2, r8
 8001bee:	464b      	mov	r3, r9
 8001bf0:	f04f 0000 	mov.w	r0, #0
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	0159      	lsls	r1, r3, #5
 8001bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfe:	0150      	lsls	r0, r2, #5
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4641      	mov	r1, r8
 8001c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c24:	ebb2 040a 	subs.w	r4, r2, sl
 8001c28:	eb63 050b 	sbc.w	r5, r3, fp
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	00eb      	lsls	r3, r5, #3
 8001c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3a:	00e2      	lsls	r2, r4, #3
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4643      	mov	r3, r8
 8001c42:	18e3      	adds	r3, r4, r3
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	464b      	mov	r3, r9
 8001c48:	eb45 0303 	adc.w	r3, r5, r3
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	028b      	lsls	r3, r1, #10
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c64:	4621      	mov	r1, r4
 8001c66:	028a      	lsls	r2, r1, #10
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	61fa      	str	r2, [r7, #28]
 8001c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c78:	f7fe fb02 	bl	8000280 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3750      	adds	r7, #80	@ 0x50
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	080043c4 	.word	0x080043c4

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d04:	f7ff ffdc 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0b5b      	lsrs	r3, r3, #13
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	@ (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	080043c4 	.word	0x080043c4

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fe52 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fc1a 	bl	80025a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e044      	b.n	8001e6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1a      	ldr	r2, [pc, #104]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xb4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x6c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d010      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	e007      	b.n	8001e68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40014000 	.word	0x40014000

08001e8c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e041      	b.n	8001f22 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f839 	bl	8001f2a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f000 fb68 	bl	80025a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_TIM_OC_Start_IT+0x28>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e022      	b.n	8001fae <HAL_TIM_OC_Start_IT+0x6e>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d109      	bne.n	8001f82 <HAL_TIM_OC_Start_IT+0x42>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e015      	b.n	8001fae <HAL_TIM_OC_Start_IT+0x6e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d109      	bne.n	8001f9c <HAL_TIM_OC_Start_IT+0x5c>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e008      	b.n	8001fae <HAL_TIM_OC_Start_IT+0x6e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0b3      	b.n	800211e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_OC_Start_IT+0x86>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	e013      	b.n	8001fee <HAL_TIM_OC_Start_IT+0xae>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_OC_Start_IT+0x96>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd4:	e00b      	b.n	8001fee <HAL_TIM_OC_Start_IT+0xae>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_OC_Start_IT+0xa6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe4:	e003      	b.n	8001fee <HAL_TIM_OC_Start_IT+0xae>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d841      	bhi.n	8002078 <HAL_TIM_OC_Start_IT+0x138>
 8001ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <HAL_TIM_OC_Start_IT+0xbc>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	08002079 	.word	0x08002079
 8002004:	08002079 	.word	0x08002079
 8002008:	08002079 	.word	0x08002079
 800200c:	08002043 	.word	0x08002043
 8002010:	08002079 	.word	0x08002079
 8002014:	08002079 	.word	0x08002079
 8002018:	08002079 	.word	0x08002079
 800201c:	08002055 	.word	0x08002055
 8002020:	08002079 	.word	0x08002079
 8002024:	08002079 	.word	0x08002079
 8002028:	08002079 	.word	0x08002079
 800202c:	08002067 	.word	0x08002067
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	60da      	str	r2, [r3, #12]
      break;
 8002040:	e01d      	b.n	800207e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	60da      	str	r2, [r3, #12]
      break;
 8002052:	e014      	b.n	800207e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	60da      	str	r2, [r3, #12]
      break;
 8002064:	e00b      	b.n	800207e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0210 	orr.w	r2, r2, #16
 8002074:	60da      	str	r2, [r3, #12]
      break;
 8002076:	e002      	b.n	800207e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	bf00      	nop
  }

  if (status == HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d14b      	bne.n	800211c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fd33 	bl	8002af8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a24      	ldr	r2, [pc, #144]	@ (8002128 <HAL_TIM_OC_Start_IT+0x1e8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d107      	bne.n	80020ac <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_TIM_OC_Start_IT+0x1e8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d018      	beq.n	80020e8 <HAL_TIM_OC_Start_IT+0x1a8>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020be:	d013      	beq.n	80020e8 <HAL_TIM_OC_Start_IT+0x1a8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_TIM_OC_Start_IT+0x1ec>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00e      	beq.n	80020e8 <HAL_TIM_OC_Start_IT+0x1a8>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a18      	ldr	r2, [pc, #96]	@ (8002130 <HAL_TIM_OC_Start_IT+0x1f0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_TIM_OC_Start_IT+0x1a8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a16      	ldr	r2, [pc, #88]	@ (8002134 <HAL_TIM_OC_Start_IT+0x1f4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d004      	beq.n	80020e8 <HAL_TIM_OC_Start_IT+0x1a8>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a15      	ldr	r2, [pc, #84]	@ (8002138 <HAL_TIM_OC_Start_IT+0x1f8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d111      	bne.n	800210c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d010      	beq.n	800211c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210a:	e007      	b.n	800211c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40014000 	.word	0x40014000

0800213c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d020      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0202 	mvn.w	r2, #2
 8002170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9eb 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fbee 	bl	8000970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f9ee 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d020      	beq.n	80021ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0204 	mvn.w	r2, #4
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f9c5 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fbc8 	bl	8000970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f9c8 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0208 	mvn.w	r2, #8
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2204      	movs	r2, #4
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f99f 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fba2 	bl	8000970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9a2 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d020      	beq.n	8002284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01b      	beq.n	8002284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0210 	mvn.w	r2, #16
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2208      	movs	r2, #8
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f979 	bl	8002562 <HAL_TIM_IC_CaptureCallback>
 8002270:	e005      	b.n	800227e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fb7c 	bl	8000970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f97c 	bl	8002576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0201 	mvn.w	r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe fb46 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fcb4 	bl	8002c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f94d 	bl	800258a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0220 	mvn.w	r2, #32
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fc86 	bl	8002c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002336:	2302      	movs	r3, #2
 8002338:	e048      	b.n	80023cc <HAL_TIM_OC_ConfigChannel+0xb0>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d839      	bhi.n	80023bc <HAL_TIM_OC_ConfigChannel+0xa0>
 8002348:	a201      	add	r2, pc, #4	@ (adr r2, 8002350 <HAL_TIM_OC_ConfigChannel+0x34>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	08002385 	.word	0x08002385
 8002354:	080023bd 	.word	0x080023bd
 8002358:	080023bd 	.word	0x080023bd
 800235c:	080023bd 	.word	0x080023bd
 8002360:	08002393 	.word	0x08002393
 8002364:	080023bd 	.word	0x080023bd
 8002368:	080023bd 	.word	0x080023bd
 800236c:	080023bd 	.word	0x080023bd
 8002370:	080023a1 	.word	0x080023a1
 8002374:	080023bd 	.word	0x080023bd
 8002378:	080023bd 	.word	0x080023bd
 800237c:	080023bd 	.word	0x080023bd
 8002380:	080023af 	.word	0x080023af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f98e 	bl	80026ac <TIM_OC1_SetConfig>
      break;
 8002390:	e017      	b.n	80023c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68b9      	ldr	r1, [r7, #8]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f9ed 	bl	8002778 <TIM_OC2_SetConfig>
      break;
 800239e:	e010      	b.n	80023c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fa52 	bl	8002850 <TIM_OC3_SetConfig>
      break;
 80023ac:	e009      	b.n	80023c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fab5 	bl	8002924 <TIM_OC4_SetConfig>
      break;
 80023ba:	e002      	b.n	80023c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
      break;
 80023c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b4      	b.n	800255a <HAL_TIM_ConfigClockSource+0x186>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002428:	d03e      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xd4>
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800242e:	f200 8087 	bhi.w	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002436:	f000 8086 	beq.w	8002546 <HAL_TIM_ConfigClockSource+0x172>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	d87f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b70      	cmp	r3, #112	@ 0x70
 8002442:	d01a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xa6>
 8002444:	2b70      	cmp	r3, #112	@ 0x70
 8002446:	d87b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b60      	cmp	r3, #96	@ 0x60
 800244a:	d050      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x11a>
 800244c:	2b60      	cmp	r3, #96	@ 0x60
 800244e:	d877      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b50      	cmp	r3, #80	@ 0x50
 8002452:	d03c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xfa>
 8002454:	2b50      	cmp	r3, #80	@ 0x50
 8002456:	d873      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d058      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x13a>
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d86f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b30      	cmp	r3, #48	@ 0x30
 8002462:	d064      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b30      	cmp	r3, #48	@ 0x30
 8002466:	d86b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d060      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d867      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d05a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	e062      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800248a:	f000 fb15 	bl	8002ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800249c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
      break;
 80024a6:	e04f      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024b8:	f000 fafe 	bl	8002ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ca:	609a      	str	r2, [r3, #8]
      break;
 80024cc:	e03c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 fa72 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2150      	movs	r1, #80	@ 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 facb 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 80024ec:	e02c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 fa91 	bl	8002a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2160      	movs	r1, #96	@ 0x60
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fabb 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 800250c:	e01c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251a:	461a      	mov	r2, r3
 800251c:	f000 fa52 	bl	80029c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2140      	movs	r1, #64	@ 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f000 faab 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 800252c:	e00c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 faa2 	bl	8002a82 <TIM_ITRx_SetConfig>
      break;
 800253e:	e003      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e000      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a37      	ldr	r2, [pc, #220]	@ (8002690 <TIM_Base_SetConfig+0xf0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d00f      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a34      	ldr	r2, [pc, #208]	@ (8002694 <TIM_Base_SetConfig+0xf4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a33      	ldr	r2, [pc, #204]	@ (8002698 <TIM_Base_SetConfig+0xf8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x38>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a32      	ldr	r2, [pc, #200]	@ (800269c <TIM_Base_SetConfig+0xfc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <TIM_Base_SetConfig+0xf0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01b      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d017      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a25      	ldr	r2, [pc, #148]	@ (8002694 <TIM_Base_SetConfig+0xf4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a24      	ldr	r2, [pc, #144]	@ (8002698 <TIM_Base_SetConfig+0xf8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a23      	ldr	r2, [pc, #140]	@ (800269c <TIM_Base_SetConfig+0xfc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <TIM_Base_SetConfig+0x100>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <TIM_Base_SetConfig+0x104>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a20      	ldr	r2, [pc, #128]	@ (80026a8 <TIM_Base_SetConfig+0x108>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <TIM_Base_SetConfig+0xf0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d103      	bne.n	800266a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40010000 	.word	0x40010000
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40014400 	.word	0x40014400
 80026a8:	40014800 	.word	0x40014800

080026ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f023 0201 	bic.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 0302 	bic.w	r3, r3, #2
 80026f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a1c      	ldr	r2, [pc, #112]	@ (8002774 <TIM_OC1_SetConfig+0xc8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10c      	bne.n	8002722 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0308 	bic.w	r3, r3, #8
 800270e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <TIM_OC1_SetConfig+0xc8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d111      	bne.n	800274e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40010000 	.word	0x40010000

08002778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 0210 	bic.w	r2, r3, #16
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0320 	bic.w	r3, r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	@ (800284c <TIM_OC2_SetConfig+0xd4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10d      	bne.n	80027f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a15      	ldr	r2, [pc, #84]	@ (800284c <TIM_OC2_SetConfig+0xd4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d113      	bne.n	8002824 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800280a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	621a      	str	r2, [r3, #32]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40010000 	.word	0x40010000

08002850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002920 <TIM_OC3_SetConfig+0xd0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10d      	bne.n	80028ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <TIM_OC3_SetConfig+0xd0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d113      	bne.n	80028fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	621a      	str	r2, [r3, #32]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40010000 	.word	0x40010000

08002924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800296e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	031b      	lsls	r3, r3, #12
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	@ (80029c0 <TIM_OC4_SetConfig+0x9c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d109      	bne.n	8002998 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800298a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	019b      	lsls	r3, r3, #6
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	621a      	str	r2, [r3, #32]
}
 80029b2:	bf00      	nop
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000

080029c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0201 	bic.w	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 030a 	bic.w	r3, r3, #10
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 0210 	bic.w	r2, r3, #16
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f043 0307 	orr.w	r3, r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	401a      	ands	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e050      	b.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba8:	d013      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a16      	ldr	r2, [pc, #88]	@ (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10c      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40014000 	.word	0x40014000

08002c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e042      	b.n	8002ce0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd ff24 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	@ 0x24
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f973 	bl	8002f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d175      	bne.n	8002df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <HAL_UART_Transmit+0x2c>
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e06e      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	@ 0x21
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d26:	f7fe f891 	bl	8000e4c <HAL_GetTick>
 8002d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	88fa      	ldrh	r2, [r7, #6]
 8002d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d108      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d104      	bne.n	8002d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	e003      	b.n	8002d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d5c:	e02e      	b.n	8002dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	@ 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f848 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e03a      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10b      	bne.n	8002d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3302      	adds	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e007      	b.n	8002dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3301      	adds	r3, #1
 8002dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cb      	bne.n	8002d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2140      	movs	r1, #64	@ 0x40
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f814 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e006      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e03b      	b.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d037      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e18:	f7fe f818 	bl	8000e4c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e03a      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d023      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d020      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b40      	cmp	r3, #64	@ 0x40
 8002e4a:	d01d      	beq.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d116      	bne.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f81d 	bl	8002eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00f      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d0b4      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b095      	sub	sp, #84	@ 0x54
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	330c      	adds	r3, #12
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ed8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3314      	adds	r3, #20
 8002f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1e5      	bne.n	8002eec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d119      	bne.n	8002f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0310 	bic.w	r3, r3, #16
 8002f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f48:	61ba      	str	r2, [r7, #24]
 8002f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6979      	ldr	r1, [r7, #20]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	613b      	str	r3, [r7, #16]
   return(result);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f6a:	bf00      	nop
 8002f6c:	3754      	adds	r7, #84	@ 0x54
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b0c0      	sub	sp, #256	@ 0x100
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	68d9      	ldr	r1, [r3, #12]
 8002f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	ea40 0301 	orr.w	r3, r0, r1
 8002fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fd0:	f021 010c 	bic.w	r1, r1, #12
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	6999      	ldr	r1, [r3, #24]
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	ea40 0301 	orr.w	r3, r0, r1
 8002ffe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b8f      	ldr	r3, [pc, #572]	@ (8003244 <UART_SetConfig+0x2cc>)
 8003008:	429a      	cmp	r2, r3
 800300a:	d005      	beq.n	8003018 <UART_SetConfig+0xa0>
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b8d      	ldr	r3, [pc, #564]	@ (8003248 <UART_SetConfig+0x2d0>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d104      	bne.n	8003022 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7fe fe72 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 800301c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003020:	e003      	b.n	800302a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003022:	f7fe fe59 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8003026:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003034:	f040 810c 	bne.w	8003250 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003042:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003046:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	1891      	adds	r1, r2, r2
 8003050:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003052:	415b      	adcs	r3, r3
 8003054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003056:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800305a:	4621      	mov	r1, r4
 800305c:	eb12 0801 	adds.w	r8, r2, r1
 8003060:	4629      	mov	r1, r5
 8003062:	eb43 0901 	adc.w	r9, r3, r1
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	4623      	mov	r3, r4
 8003080:	eb18 0303 	adds.w	r3, r8, r3
 8003084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003088:	462b      	mov	r3, r5
 800308a:	eb49 0303 	adc.w	r3, r9, r3
 800308e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800309e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030a6:	460b      	mov	r3, r1
 80030a8:	18db      	adds	r3, r3, r3
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80030ac:	4613      	mov	r3, r2
 80030ae:	eb42 0303 	adc.w	r3, r2, r3
 80030b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80030b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030bc:	f7fd f8e0 	bl	8000280 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <UART_SetConfig+0x2d4>)
 80030c6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	011c      	lsls	r4, r3, #4
 80030ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	1891      	adds	r1, r2, r2
 80030e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030e8:	415b      	adcs	r3, r3
 80030ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030f0:	4641      	mov	r1, r8
 80030f2:	eb12 0a01 	adds.w	sl, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0b01 	adc.w	fp, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003108:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800310c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003110:	4692      	mov	sl, r2
 8003112:	469b      	mov	fp, r3
 8003114:	4643      	mov	r3, r8
 8003116:	eb1a 0303 	adds.w	r3, sl, r3
 800311a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800311e:	464b      	mov	r3, r9
 8003120:	eb4b 0303 	adc.w	r3, fp, r3
 8003124:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003134:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003138:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800313c:	460b      	mov	r3, r1
 800313e:	18db      	adds	r3, r3, r3
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
 8003142:	4613      	mov	r3, r2
 8003144:	eb42 0303 	adc.w	r3, r2, r3
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800314e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003152:	f7fd f895 	bl	8000280 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4611      	mov	r1, r2
 800315c:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <UART_SetConfig+0x2d4>)
 800315e:	fba3 2301 	umull	r2, r3, r3, r1
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2264      	movs	r2, #100	@ 0x64
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	1acb      	subs	r3, r1, r3
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003172:	4b36      	ldr	r3, [pc, #216]	@ (800324c <UART_SetConfig+0x2d4>)
 8003174:	fba3 2302 	umull	r2, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800318c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003190:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800319c:	415b      	adcs	r3, r3
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031f8:	460b      	mov	r3, r1
 80031fa:	18db      	adds	r3, r3, r3
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fe:	4613      	mov	r3, r2
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800320a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800320e:	f7fd f837 	bl	8000280 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <UART_SetConfig+0x2d4>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	@ 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	@ 0x32
 800322a:	4a08      	ldr	r2, [pc, #32]	@ (800324c <UART_SetConfig+0x2d4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4422      	add	r2, r4
 800323e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003240:	e106      	b.n	8003450 <UART_SetConfig+0x4d8>
 8003242:	bf00      	nop
 8003244:	40011000 	.word	0x40011000
 8003248:	40011400 	.word	0x40011400
 800324c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800325a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800325e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003262:	4642      	mov	r2, r8
 8003264:	464b      	mov	r3, r9
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6239      	str	r1, [r7, #32]
 800326a:	415b      	adcs	r3, r3
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
 800326e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003272:	4641      	mov	r1, r8
 8003274:	1854      	adds	r4, r2, r1
 8003276:	4649      	mov	r1, r9
 8003278:	eb43 0501 	adc.w	r5, r3, r1
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	00eb      	lsls	r3, r5, #3
 8003286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800328a:	00e2      	lsls	r2, r4, #3
 800328c:	4614      	mov	r4, r2
 800328e:	461d      	mov	r5, r3
 8003290:	4643      	mov	r3, r8
 8003292:	18e3      	adds	r3, r4, r3
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003298:	464b      	mov	r3, r9
 800329a:	eb45 0303 	adc.w	r3, r5, r3
 800329e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032be:	4629      	mov	r1, r5
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	4621      	mov	r1, r4
 80032c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c8:	4621      	mov	r1, r4
 80032ca:	008a      	lsls	r2, r1, #2
 80032cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032d0:	f7fc ffd6 	bl	8000280 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4b60      	ldr	r3, [pc, #384]	@ (800345c <UART_SetConfig+0x4e4>)
 80032da:	fba3 2302 	umull	r2, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	011c      	lsls	r4, r3, #4
 80032e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	1891      	adds	r1, r2, r2
 80032fa:	61b9      	str	r1, [r7, #24]
 80032fc:	415b      	adcs	r3, r3
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003304:	4641      	mov	r1, r8
 8003306:	1851      	adds	r1, r2, r1
 8003308:	6139      	str	r1, [r7, #16]
 800330a:	4649      	mov	r1, r9
 800330c:	414b      	adcs	r3, r1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800331c:	4659      	mov	r1, fp
 800331e:	00cb      	lsls	r3, r1, #3
 8003320:	4651      	mov	r1, sl
 8003322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003326:	4651      	mov	r1, sl
 8003328:	00ca      	lsls	r2, r1, #3
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	4603      	mov	r3, r0
 8003330:	4642      	mov	r2, r8
 8003332:	189b      	adds	r3, r3, r2
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003338:	464b      	mov	r3, r9
 800333a:	460a      	mov	r2, r1
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800334e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800335c:	4649      	mov	r1, r9
 800335e:	008b      	lsls	r3, r1, #2
 8003360:	4641      	mov	r1, r8
 8003362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003366:	4641      	mov	r1, r8
 8003368:	008a      	lsls	r2, r1, #2
 800336a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800336e:	f7fc ff87 	bl	8000280 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4611      	mov	r1, r2
 8003378:	4b38      	ldr	r3, [pc, #224]	@ (800345c <UART_SetConfig+0x4e4>)
 800337a:	fba3 2301 	umull	r2, r3, r3, r1
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2264      	movs	r2, #100	@ 0x64
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	1acb      	subs	r3, r1, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	@ 0x32
 800338c:	4a33      	ldr	r2, [pc, #204]	@ (800345c <UART_SetConfig+0x4e4>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003398:	441c      	add	r4, r3
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033a8:	4642      	mov	r2, r8
 80033aa:	464b      	mov	r3, r9
 80033ac:	1891      	adds	r1, r2, r2
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	415b      	adcs	r3, r3
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b8:	4641      	mov	r1, r8
 80033ba:	1851      	adds	r1, r2, r1
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	4649      	mov	r1, r9
 80033c0:	414b      	adcs	r3, r1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d0:	4659      	mov	r1, fp
 80033d2:	00cb      	lsls	r3, r1, #3
 80033d4:	4651      	mov	r1, sl
 80033d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033da:	4651      	mov	r1, sl
 80033dc:	00ca      	lsls	r2, r1, #3
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	4642      	mov	r2, r8
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033ea:	464b      	mov	r3, r9
 80033ec:	460a      	mov	r2, r1
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80033fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800340c:	4649      	mov	r1, r9
 800340e:	008b      	lsls	r3, r1, #2
 8003410:	4641      	mov	r1, r8
 8003412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003416:	4641      	mov	r1, r8
 8003418:	008a      	lsls	r2, r1, #2
 800341a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800341e:	f7fc ff2f 	bl	8000280 <__aeabi_uldivmod>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <UART_SetConfig+0x4e4>)
 8003428:	fba3 1302 	umull	r1, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	2164      	movs	r1, #100	@ 0x64
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	3332      	adds	r3, #50	@ 0x32
 800343a:	4a08      	ldr	r2, [pc, #32]	@ (800345c <UART_SetConfig+0x4e4>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4422      	add	r2, r4
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003456:	46bd      	mov	sp, r7
 8003458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345c:	51eb851f 	.word	0x51eb851f

08003460 <std>:
 8003460:	2300      	movs	r3, #0
 8003462:	b510      	push	{r4, lr}
 8003464:	4604      	mov	r4, r0
 8003466:	e9c0 3300 	strd	r3, r3, [r0]
 800346a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800346e:	6083      	str	r3, [r0, #8]
 8003470:	8181      	strh	r1, [r0, #12]
 8003472:	6643      	str	r3, [r0, #100]	@ 0x64
 8003474:	81c2      	strh	r2, [r0, #14]
 8003476:	6183      	str	r3, [r0, #24]
 8003478:	4619      	mov	r1, r3
 800347a:	2208      	movs	r2, #8
 800347c:	305c      	adds	r0, #92	@ 0x5c
 800347e:	f000 f9f9 	bl	8003874 <memset>
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <std+0x58>)
 8003484:	6263      	str	r3, [r4, #36]	@ 0x24
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <std+0x5c>)
 8003488:	62a3      	str	r3, [r4, #40]	@ 0x28
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <std+0x60>)
 800348c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <std+0x64>)
 8003490:	6323      	str	r3, [r4, #48]	@ 0x30
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <std+0x68>)
 8003494:	6224      	str	r4, [r4, #32]
 8003496:	429c      	cmp	r4, r3
 8003498:	d006      	beq.n	80034a8 <std+0x48>
 800349a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800349e:	4294      	cmp	r4, r2
 80034a0:	d002      	beq.n	80034a8 <std+0x48>
 80034a2:	33d0      	adds	r3, #208	@ 0xd0
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d105      	bne.n	80034b4 <std+0x54>
 80034a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034b0:	f000 ba58 	b.w	8003964 <__retarget_lock_init_recursive>
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	080036c5 	.word	0x080036c5
 80034bc:	080036e7 	.word	0x080036e7
 80034c0:	0800371f 	.word	0x0800371f
 80034c4:	08003743 	.word	0x08003743
 80034c8:	20000124 	.word	0x20000124

080034cc <stdio_exit_handler>:
 80034cc:	4a02      	ldr	r2, [pc, #8]	@ (80034d8 <stdio_exit_handler+0xc>)
 80034ce:	4903      	ldr	r1, [pc, #12]	@ (80034dc <stdio_exit_handler+0x10>)
 80034d0:	4803      	ldr	r0, [pc, #12]	@ (80034e0 <stdio_exit_handler+0x14>)
 80034d2:	f000 b869 	b.w	80035a8 <_fwalk_sglue>
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	08004201 	.word	0x08004201
 80034e0:	2000001c 	.word	0x2000001c

080034e4 <cleanup_stdio>:
 80034e4:	6841      	ldr	r1, [r0, #4]
 80034e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <cleanup_stdio+0x34>)
 80034e8:	4299      	cmp	r1, r3
 80034ea:	b510      	push	{r4, lr}
 80034ec:	4604      	mov	r4, r0
 80034ee:	d001      	beq.n	80034f4 <cleanup_stdio+0x10>
 80034f0:	f000 fe86 	bl	8004200 <_fflush_r>
 80034f4:	68a1      	ldr	r1, [r4, #8]
 80034f6:	4b09      	ldr	r3, [pc, #36]	@ (800351c <cleanup_stdio+0x38>)
 80034f8:	4299      	cmp	r1, r3
 80034fa:	d002      	beq.n	8003502 <cleanup_stdio+0x1e>
 80034fc:	4620      	mov	r0, r4
 80034fe:	f000 fe7f 	bl	8004200 <_fflush_r>
 8003502:	68e1      	ldr	r1, [r4, #12]
 8003504:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <cleanup_stdio+0x3c>)
 8003506:	4299      	cmp	r1, r3
 8003508:	d004      	beq.n	8003514 <cleanup_stdio+0x30>
 800350a:	4620      	mov	r0, r4
 800350c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003510:	f000 be76 	b.w	8004200 <_fflush_r>
 8003514:	bd10      	pop	{r4, pc}
 8003516:	bf00      	nop
 8003518:	20000124 	.word	0x20000124
 800351c:	2000018c 	.word	0x2000018c
 8003520:	200001f4 	.word	0x200001f4

08003524 <global_stdio_init.part.0>:
 8003524:	b510      	push	{r4, lr}
 8003526:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <global_stdio_init.part.0+0x30>)
 8003528:	4c0b      	ldr	r4, [pc, #44]	@ (8003558 <global_stdio_init.part.0+0x34>)
 800352a:	4a0c      	ldr	r2, [pc, #48]	@ (800355c <global_stdio_init.part.0+0x38>)
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	4620      	mov	r0, r4
 8003530:	2200      	movs	r2, #0
 8003532:	2104      	movs	r1, #4
 8003534:	f7ff ff94 	bl	8003460 <std>
 8003538:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800353c:	2201      	movs	r2, #1
 800353e:	2109      	movs	r1, #9
 8003540:	f7ff ff8e 	bl	8003460 <std>
 8003544:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003548:	2202      	movs	r2, #2
 800354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354e:	2112      	movs	r1, #18
 8003550:	f7ff bf86 	b.w	8003460 <std>
 8003554:	2000025c 	.word	0x2000025c
 8003558:	20000124 	.word	0x20000124
 800355c:	080034cd 	.word	0x080034cd

08003560 <__sfp_lock_acquire>:
 8003560:	4801      	ldr	r0, [pc, #4]	@ (8003568 <__sfp_lock_acquire+0x8>)
 8003562:	f000 ba00 	b.w	8003966 <__retarget_lock_acquire_recursive>
 8003566:	bf00      	nop
 8003568:	20000265 	.word	0x20000265

0800356c <__sfp_lock_release>:
 800356c:	4801      	ldr	r0, [pc, #4]	@ (8003574 <__sfp_lock_release+0x8>)
 800356e:	f000 b9fb 	b.w	8003968 <__retarget_lock_release_recursive>
 8003572:	bf00      	nop
 8003574:	20000265 	.word	0x20000265

08003578 <__sinit>:
 8003578:	b510      	push	{r4, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	f7ff fff0 	bl	8003560 <__sfp_lock_acquire>
 8003580:	6a23      	ldr	r3, [r4, #32]
 8003582:	b11b      	cbz	r3, 800358c <__sinit+0x14>
 8003584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003588:	f7ff bff0 	b.w	800356c <__sfp_lock_release>
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__sinit+0x28>)
 800358e:	6223      	str	r3, [r4, #32]
 8003590:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <__sinit+0x2c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f5      	bne.n	8003584 <__sinit+0xc>
 8003598:	f7ff ffc4 	bl	8003524 <global_stdio_init.part.0>
 800359c:	e7f2      	b.n	8003584 <__sinit+0xc>
 800359e:	bf00      	nop
 80035a0:	080034e5 	.word	0x080034e5
 80035a4:	2000025c 	.word	0x2000025c

080035a8 <_fwalk_sglue>:
 80035a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	4607      	mov	r7, r0
 80035ae:	4688      	mov	r8, r1
 80035b0:	4614      	mov	r4, r2
 80035b2:	2600      	movs	r6, #0
 80035b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035b8:	f1b9 0901 	subs.w	r9, r9, #1
 80035bc:	d505      	bpl.n	80035ca <_fwalk_sglue+0x22>
 80035be:	6824      	ldr	r4, [r4, #0]
 80035c0:	2c00      	cmp	r4, #0
 80035c2:	d1f7      	bne.n	80035b4 <_fwalk_sglue+0xc>
 80035c4:	4630      	mov	r0, r6
 80035c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ca:	89ab      	ldrh	r3, [r5, #12]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d907      	bls.n	80035e0 <_fwalk_sglue+0x38>
 80035d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035d4:	3301      	adds	r3, #1
 80035d6:	d003      	beq.n	80035e0 <_fwalk_sglue+0x38>
 80035d8:	4629      	mov	r1, r5
 80035da:	4638      	mov	r0, r7
 80035dc:	47c0      	blx	r8
 80035de:	4306      	orrs	r6, r0
 80035e0:	3568      	adds	r5, #104	@ 0x68
 80035e2:	e7e9      	b.n	80035b8 <_fwalk_sglue+0x10>

080035e4 <iprintf>:
 80035e4:	b40f      	push	{r0, r1, r2, r3}
 80035e6:	b507      	push	{r0, r1, r2, lr}
 80035e8:	4906      	ldr	r1, [pc, #24]	@ (8003604 <iprintf+0x20>)
 80035ea:	ab04      	add	r3, sp, #16
 80035ec:	6808      	ldr	r0, [r1, #0]
 80035ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80035f2:	6881      	ldr	r1, [r0, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	f000 fadb 	bl	8003bb0 <_vfiprintf_r>
 80035fa:	b003      	add	sp, #12
 80035fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003600:	b004      	add	sp, #16
 8003602:	4770      	bx	lr
 8003604:	20000018 	.word	0x20000018

08003608 <_puts_r>:
 8003608:	6a03      	ldr	r3, [r0, #32]
 800360a:	b570      	push	{r4, r5, r6, lr}
 800360c:	6884      	ldr	r4, [r0, #8]
 800360e:	4605      	mov	r5, r0
 8003610:	460e      	mov	r6, r1
 8003612:	b90b      	cbnz	r3, 8003618 <_puts_r+0x10>
 8003614:	f7ff ffb0 	bl	8003578 <__sinit>
 8003618:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800361a:	07db      	lsls	r3, r3, #31
 800361c:	d405      	bmi.n	800362a <_puts_r+0x22>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	0598      	lsls	r0, r3, #22
 8003622:	d402      	bmi.n	800362a <_puts_r+0x22>
 8003624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003626:	f000 f99e 	bl	8003966 <__retarget_lock_acquire_recursive>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	0719      	lsls	r1, r3, #28
 800362e:	d502      	bpl.n	8003636 <_puts_r+0x2e>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d135      	bne.n	80036a2 <_puts_r+0x9a>
 8003636:	4621      	mov	r1, r4
 8003638:	4628      	mov	r0, r5
 800363a:	f000 f8c5 	bl	80037c8 <__swsetup_r>
 800363e:	b380      	cbz	r0, 80036a2 <_puts_r+0x9a>
 8003640:	f04f 35ff 	mov.w	r5, #4294967295
 8003644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003646:	07da      	lsls	r2, r3, #31
 8003648:	d405      	bmi.n	8003656 <_puts_r+0x4e>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	059b      	lsls	r3, r3, #22
 800364e:	d402      	bmi.n	8003656 <_puts_r+0x4e>
 8003650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003652:	f000 f989 	bl	8003968 <__retarget_lock_release_recursive>
 8003656:	4628      	mov	r0, r5
 8003658:	bd70      	pop	{r4, r5, r6, pc}
 800365a:	2b00      	cmp	r3, #0
 800365c:	da04      	bge.n	8003668 <_puts_r+0x60>
 800365e:	69a2      	ldr	r2, [r4, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	dc17      	bgt.n	8003694 <_puts_r+0x8c>
 8003664:	290a      	cmp	r1, #10
 8003666:	d015      	beq.n	8003694 <_puts_r+0x8c>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	6022      	str	r2, [r4, #0]
 800366e:	7019      	strb	r1, [r3, #0]
 8003670:	68a3      	ldr	r3, [r4, #8]
 8003672:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003676:	3b01      	subs	r3, #1
 8003678:	60a3      	str	r3, [r4, #8]
 800367a:	2900      	cmp	r1, #0
 800367c:	d1ed      	bne.n	800365a <_puts_r+0x52>
 800367e:	2b00      	cmp	r3, #0
 8003680:	da11      	bge.n	80036a6 <_puts_r+0x9e>
 8003682:	4622      	mov	r2, r4
 8003684:	210a      	movs	r1, #10
 8003686:	4628      	mov	r0, r5
 8003688:	f000 f85f 	bl	800374a <__swbuf_r>
 800368c:	3001      	adds	r0, #1
 800368e:	d0d7      	beq.n	8003640 <_puts_r+0x38>
 8003690:	250a      	movs	r5, #10
 8003692:	e7d7      	b.n	8003644 <_puts_r+0x3c>
 8003694:	4622      	mov	r2, r4
 8003696:	4628      	mov	r0, r5
 8003698:	f000 f857 	bl	800374a <__swbuf_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d1e7      	bne.n	8003670 <_puts_r+0x68>
 80036a0:	e7ce      	b.n	8003640 <_puts_r+0x38>
 80036a2:	3e01      	subs	r6, #1
 80036a4:	e7e4      	b.n	8003670 <_puts_r+0x68>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	6022      	str	r2, [r4, #0]
 80036ac:	220a      	movs	r2, #10
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e7ee      	b.n	8003690 <_puts_r+0x88>
	...

080036b4 <puts>:
 80036b4:	4b02      	ldr	r3, [pc, #8]	@ (80036c0 <puts+0xc>)
 80036b6:	4601      	mov	r1, r0
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f7ff bfa5 	b.w	8003608 <_puts_r>
 80036be:	bf00      	nop
 80036c0:	20000018 	.word	0x20000018

080036c4 <__sread>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	460c      	mov	r4, r1
 80036c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036cc:	f000 f8fc 	bl	80038c8 <_read_r>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	bfab      	itete	ge
 80036d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036d6:	89a3      	ldrhlt	r3, [r4, #12]
 80036d8:	181b      	addge	r3, r3, r0
 80036da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036de:	bfac      	ite	ge
 80036e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036e2:	81a3      	strhlt	r3, [r4, #12]
 80036e4:	bd10      	pop	{r4, pc}

080036e6 <__swrite>:
 80036e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ea:	461f      	mov	r7, r3
 80036ec:	898b      	ldrh	r3, [r1, #12]
 80036ee:	05db      	lsls	r3, r3, #23
 80036f0:	4605      	mov	r5, r0
 80036f2:	460c      	mov	r4, r1
 80036f4:	4616      	mov	r6, r2
 80036f6:	d505      	bpl.n	8003704 <__swrite+0x1e>
 80036f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036fc:	2302      	movs	r3, #2
 80036fe:	2200      	movs	r2, #0
 8003700:	f000 f8d0 	bl	80038a4 <_lseek_r>
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800370a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800370e:	81a3      	strh	r3, [r4, #12]
 8003710:	4632      	mov	r2, r6
 8003712:	463b      	mov	r3, r7
 8003714:	4628      	mov	r0, r5
 8003716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371a:	f000 b8e7 	b.w	80038ec <_write_r>

0800371e <__sseek>:
 800371e:	b510      	push	{r4, lr}
 8003720:	460c      	mov	r4, r1
 8003722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003726:	f000 f8bd 	bl	80038a4 <_lseek_r>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	bf15      	itete	ne
 8003730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800373a:	81a3      	strheq	r3, [r4, #12]
 800373c:	bf18      	it	ne
 800373e:	81a3      	strhne	r3, [r4, #12]
 8003740:	bd10      	pop	{r4, pc}

08003742 <__sclose>:
 8003742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003746:	f000 b89d 	b.w	8003884 <_close_r>

0800374a <__swbuf_r>:
 800374a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374c:	460e      	mov	r6, r1
 800374e:	4614      	mov	r4, r2
 8003750:	4605      	mov	r5, r0
 8003752:	b118      	cbz	r0, 800375c <__swbuf_r+0x12>
 8003754:	6a03      	ldr	r3, [r0, #32]
 8003756:	b90b      	cbnz	r3, 800375c <__swbuf_r+0x12>
 8003758:	f7ff ff0e 	bl	8003578 <__sinit>
 800375c:	69a3      	ldr	r3, [r4, #24]
 800375e:	60a3      	str	r3, [r4, #8]
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	071a      	lsls	r2, r3, #28
 8003764:	d501      	bpl.n	800376a <__swbuf_r+0x20>
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	b943      	cbnz	r3, 800377c <__swbuf_r+0x32>
 800376a:	4621      	mov	r1, r4
 800376c:	4628      	mov	r0, r5
 800376e:	f000 f82b 	bl	80037c8 <__swsetup_r>
 8003772:	b118      	cbz	r0, 800377c <__swbuf_r+0x32>
 8003774:	f04f 37ff 	mov.w	r7, #4294967295
 8003778:	4638      	mov	r0, r7
 800377a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	6922      	ldr	r2, [r4, #16]
 8003780:	1a98      	subs	r0, r3, r2
 8003782:	6963      	ldr	r3, [r4, #20]
 8003784:	b2f6      	uxtb	r6, r6
 8003786:	4283      	cmp	r3, r0
 8003788:	4637      	mov	r7, r6
 800378a:	dc05      	bgt.n	8003798 <__swbuf_r+0x4e>
 800378c:	4621      	mov	r1, r4
 800378e:	4628      	mov	r0, r5
 8003790:	f000 fd36 	bl	8004200 <_fflush_r>
 8003794:	2800      	cmp	r0, #0
 8003796:	d1ed      	bne.n	8003774 <__swbuf_r+0x2a>
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	3b01      	subs	r3, #1
 800379c:	60a3      	str	r3, [r4, #8]
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	6022      	str	r2, [r4, #0]
 80037a4:	701e      	strb	r6, [r3, #0]
 80037a6:	6962      	ldr	r2, [r4, #20]
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d004      	beq.n	80037b8 <__swbuf_r+0x6e>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	07db      	lsls	r3, r3, #31
 80037b2:	d5e1      	bpl.n	8003778 <__swbuf_r+0x2e>
 80037b4:	2e0a      	cmp	r6, #10
 80037b6:	d1df      	bne.n	8003778 <__swbuf_r+0x2e>
 80037b8:	4621      	mov	r1, r4
 80037ba:	4628      	mov	r0, r5
 80037bc:	f000 fd20 	bl	8004200 <_fflush_r>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d0d9      	beq.n	8003778 <__swbuf_r+0x2e>
 80037c4:	e7d6      	b.n	8003774 <__swbuf_r+0x2a>
	...

080037c8 <__swsetup_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4b29      	ldr	r3, [pc, #164]	@ (8003870 <__swsetup_r+0xa8>)
 80037cc:	4605      	mov	r5, r0
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	460c      	mov	r4, r1
 80037d2:	b118      	cbz	r0, 80037dc <__swsetup_r+0x14>
 80037d4:	6a03      	ldr	r3, [r0, #32]
 80037d6:	b90b      	cbnz	r3, 80037dc <__swsetup_r+0x14>
 80037d8:	f7ff fece 	bl	8003578 <__sinit>
 80037dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e0:	0719      	lsls	r1, r3, #28
 80037e2:	d422      	bmi.n	800382a <__swsetup_r+0x62>
 80037e4:	06da      	lsls	r2, r3, #27
 80037e6:	d407      	bmi.n	80037f8 <__swsetup_r+0x30>
 80037e8:	2209      	movs	r2, #9
 80037ea:	602a      	str	r2, [r5, #0]
 80037ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	f04f 30ff 	mov.w	r0, #4294967295
 80037f6:	e033      	b.n	8003860 <__swsetup_r+0x98>
 80037f8:	0758      	lsls	r0, r3, #29
 80037fa:	d512      	bpl.n	8003822 <__swsetup_r+0x5a>
 80037fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037fe:	b141      	cbz	r1, 8003812 <__swsetup_r+0x4a>
 8003800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003804:	4299      	cmp	r1, r3
 8003806:	d002      	beq.n	800380e <__swsetup_r+0x46>
 8003808:	4628      	mov	r0, r5
 800380a:	f000 f8af 	bl	800396c <_free_r>
 800380e:	2300      	movs	r3, #0
 8003810:	6363      	str	r3, [r4, #52]	@ 0x34
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	2300      	movs	r3, #0
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	b94b      	cbnz	r3, 8003842 <__swsetup_r+0x7a>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003838:	d003      	beq.n	8003842 <__swsetup_r+0x7a>
 800383a:	4621      	mov	r1, r4
 800383c:	4628      	mov	r0, r5
 800383e:	f000 fd2d 	bl	800429c <__smakebuf_r>
 8003842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003846:	f013 0201 	ands.w	r2, r3, #1
 800384a:	d00a      	beq.n	8003862 <__swsetup_r+0x9a>
 800384c:	2200      	movs	r2, #0
 800384e:	60a2      	str	r2, [r4, #8]
 8003850:	6962      	ldr	r2, [r4, #20]
 8003852:	4252      	negs	r2, r2
 8003854:	61a2      	str	r2, [r4, #24]
 8003856:	6922      	ldr	r2, [r4, #16]
 8003858:	b942      	cbnz	r2, 800386c <__swsetup_r+0xa4>
 800385a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800385e:	d1c5      	bne.n	80037ec <__swsetup_r+0x24>
 8003860:	bd38      	pop	{r3, r4, r5, pc}
 8003862:	0799      	lsls	r1, r3, #30
 8003864:	bf58      	it	pl
 8003866:	6962      	ldrpl	r2, [r4, #20]
 8003868:	60a2      	str	r2, [r4, #8]
 800386a:	e7f4      	b.n	8003856 <__swsetup_r+0x8e>
 800386c:	2000      	movs	r0, #0
 800386e:	e7f7      	b.n	8003860 <__swsetup_r+0x98>
 8003870:	20000018 	.word	0x20000018

08003874 <memset>:
 8003874:	4402      	add	r2, r0
 8003876:	4603      	mov	r3, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	f803 1b01 	strb.w	r1, [r3], #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <_close_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d06      	ldr	r5, [pc, #24]	@ (80038a0 <_close_r+0x1c>)
 8003888:	2300      	movs	r3, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd f9cf 	bl	8000c32 <_close>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_close_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_close_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000260 	.word	0x20000260

080038a4 <_lseek_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	@ (80038c4 <_lseek_r+0x20>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	4608      	mov	r0, r1
 80038ac:	4611      	mov	r1, r2
 80038ae:	2200      	movs	r2, #0
 80038b0:	602a      	str	r2, [r5, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fd f9e4 	bl	8000c80 <_lseek>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_lseek_r+0x1e>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_lseek_r+0x1e>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	20000260 	.word	0x20000260

080038c8 <_read_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d07      	ldr	r5, [pc, #28]	@ (80038e8 <_read_r+0x20>)
 80038cc:	4604      	mov	r4, r0
 80038ce:	4608      	mov	r0, r1
 80038d0:	4611      	mov	r1, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	602a      	str	r2, [r5, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	f7fd f972 	bl	8000bc0 <_read>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_read_r+0x1e>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_read_r+0x1e>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	20000260 	.word	0x20000260

080038ec <_write_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d07      	ldr	r5, [pc, #28]	@ (800390c <_write_r+0x20>)
 80038f0:	4604      	mov	r4, r0
 80038f2:	4608      	mov	r0, r1
 80038f4:	4611      	mov	r1, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	602a      	str	r2, [r5, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f7fd f97d 	bl	8000bfa <_write>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_write_r+0x1e>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_write_r+0x1e>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	20000260 	.word	0x20000260

08003910 <__errno>:
 8003910:	4b01      	ldr	r3, [pc, #4]	@ (8003918 <__errno+0x8>)
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000018 	.word	0x20000018

0800391c <__libc_init_array>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	4d0d      	ldr	r5, [pc, #52]	@ (8003954 <__libc_init_array+0x38>)
 8003920:	4c0d      	ldr	r4, [pc, #52]	@ (8003958 <__libc_init_array+0x3c>)
 8003922:	1b64      	subs	r4, r4, r5
 8003924:	10a4      	asrs	r4, r4, #2
 8003926:	2600      	movs	r6, #0
 8003928:	42a6      	cmp	r6, r4
 800392a:	d109      	bne.n	8003940 <__libc_init_array+0x24>
 800392c:	4d0b      	ldr	r5, [pc, #44]	@ (800395c <__libc_init_array+0x40>)
 800392e:	4c0c      	ldr	r4, [pc, #48]	@ (8003960 <__libc_init_array+0x44>)
 8003930:	f000 fd22 	bl	8004378 <_init>
 8003934:	1b64      	subs	r4, r4, r5
 8003936:	10a4      	asrs	r4, r4, #2
 8003938:	2600      	movs	r6, #0
 800393a:	42a6      	cmp	r6, r4
 800393c:	d105      	bne.n	800394a <__libc_init_array+0x2e>
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f855 3b04 	ldr.w	r3, [r5], #4
 8003944:	4798      	blx	r3
 8003946:	3601      	adds	r6, #1
 8003948:	e7ee      	b.n	8003928 <__libc_init_array+0xc>
 800394a:	f855 3b04 	ldr.w	r3, [r5], #4
 800394e:	4798      	blx	r3
 8003950:	3601      	adds	r6, #1
 8003952:	e7f2      	b.n	800393a <__libc_init_array+0x1e>
 8003954:	08004408 	.word	0x08004408
 8003958:	08004408 	.word	0x08004408
 800395c:	08004408 	.word	0x08004408
 8003960:	0800440c 	.word	0x0800440c

08003964 <__retarget_lock_init_recursive>:
 8003964:	4770      	bx	lr

08003966 <__retarget_lock_acquire_recursive>:
 8003966:	4770      	bx	lr

08003968 <__retarget_lock_release_recursive>:
 8003968:	4770      	bx	lr
	...

0800396c <_free_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4605      	mov	r5, r0
 8003970:	2900      	cmp	r1, #0
 8003972:	d041      	beq.n	80039f8 <_free_r+0x8c>
 8003974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003978:	1f0c      	subs	r4, r1, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfb8      	it	lt
 800397e:	18e4      	addlt	r4, r4, r3
 8003980:	f000 f8e0 	bl	8003b44 <__malloc_lock>
 8003984:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <_free_r+0x90>)
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	b933      	cbnz	r3, 8003998 <_free_r+0x2c>
 800398a:	6063      	str	r3, [r4, #4]
 800398c:	6014      	str	r4, [r2, #0]
 800398e:	4628      	mov	r0, r5
 8003990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003994:	f000 b8dc 	b.w	8003b50 <__malloc_unlock>
 8003998:	42a3      	cmp	r3, r4
 800399a:	d908      	bls.n	80039ae <_free_r+0x42>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	1821      	adds	r1, r4, r0
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf01      	itttt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	1809      	addeq	r1, r1, r0
 80039aa:	6021      	streq	r1, [r4, #0]
 80039ac:	e7ed      	b.n	800398a <_free_r+0x1e>
 80039ae:	461a      	mov	r2, r3
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	b10b      	cbz	r3, 80039b8 <_free_r+0x4c>
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d9fa      	bls.n	80039ae <_free_r+0x42>
 80039b8:	6811      	ldr	r1, [r2, #0]
 80039ba:	1850      	adds	r0, r2, r1
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d10b      	bne.n	80039d8 <_free_r+0x6c>
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	4401      	add	r1, r0
 80039c4:	1850      	adds	r0, r2, r1
 80039c6:	4283      	cmp	r3, r0
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	d1e0      	bne.n	800398e <_free_r+0x22>
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	6053      	str	r3, [r2, #4]
 80039d2:	4408      	add	r0, r1
 80039d4:	6010      	str	r0, [r2, #0]
 80039d6:	e7da      	b.n	800398e <_free_r+0x22>
 80039d8:	d902      	bls.n	80039e0 <_free_r+0x74>
 80039da:	230c      	movs	r3, #12
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	e7d6      	b.n	800398e <_free_r+0x22>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	1821      	adds	r1, r4, r0
 80039e4:	428b      	cmp	r3, r1
 80039e6:	bf04      	itt	eq
 80039e8:	6819      	ldreq	r1, [r3, #0]
 80039ea:	685b      	ldreq	r3, [r3, #4]
 80039ec:	6063      	str	r3, [r4, #4]
 80039ee:	bf04      	itt	eq
 80039f0:	1809      	addeq	r1, r1, r0
 80039f2:	6021      	streq	r1, [r4, #0]
 80039f4:	6054      	str	r4, [r2, #4]
 80039f6:	e7ca      	b.n	800398e <_free_r+0x22>
 80039f8:	bd38      	pop	{r3, r4, r5, pc}
 80039fa:	bf00      	nop
 80039fc:	2000026c 	.word	0x2000026c

08003a00 <sbrk_aligned>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4e0f      	ldr	r6, [pc, #60]	@ (8003a40 <sbrk_aligned+0x40>)
 8003a04:	460c      	mov	r4, r1
 8003a06:	6831      	ldr	r1, [r6, #0]
 8003a08:	4605      	mov	r5, r0
 8003a0a:	b911      	cbnz	r1, 8003a12 <sbrk_aligned+0x12>
 8003a0c:	f000 fca4 	bl	8004358 <_sbrk_r>
 8003a10:	6030      	str	r0, [r6, #0]
 8003a12:	4621      	mov	r1, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	f000 fc9f 	bl	8004358 <_sbrk_r>
 8003a1a:	1c43      	adds	r3, r0, #1
 8003a1c:	d103      	bne.n	8003a26 <sbrk_aligned+0x26>
 8003a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003a22:	4620      	mov	r0, r4
 8003a24:	bd70      	pop	{r4, r5, r6, pc}
 8003a26:	1cc4      	adds	r4, r0, #3
 8003a28:	f024 0403 	bic.w	r4, r4, #3
 8003a2c:	42a0      	cmp	r0, r4
 8003a2e:	d0f8      	beq.n	8003a22 <sbrk_aligned+0x22>
 8003a30:	1a21      	subs	r1, r4, r0
 8003a32:	4628      	mov	r0, r5
 8003a34:	f000 fc90 	bl	8004358 <_sbrk_r>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d1f2      	bne.n	8003a22 <sbrk_aligned+0x22>
 8003a3c:	e7ef      	b.n	8003a1e <sbrk_aligned+0x1e>
 8003a3e:	bf00      	nop
 8003a40:	20000268 	.word	0x20000268

08003a44 <_malloc_r>:
 8003a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a48:	1ccd      	adds	r5, r1, #3
 8003a4a:	f025 0503 	bic.w	r5, r5, #3
 8003a4e:	3508      	adds	r5, #8
 8003a50:	2d0c      	cmp	r5, #12
 8003a52:	bf38      	it	cc
 8003a54:	250c      	movcc	r5, #12
 8003a56:	2d00      	cmp	r5, #0
 8003a58:	4606      	mov	r6, r0
 8003a5a:	db01      	blt.n	8003a60 <_malloc_r+0x1c>
 8003a5c:	42a9      	cmp	r1, r5
 8003a5e:	d904      	bls.n	8003a6a <_malloc_r+0x26>
 8003a60:	230c      	movs	r3, #12
 8003a62:	6033      	str	r3, [r6, #0]
 8003a64:	2000      	movs	r0, #0
 8003a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b40 <_malloc_r+0xfc>
 8003a6e:	f000 f869 	bl	8003b44 <__malloc_lock>
 8003a72:	f8d8 3000 	ldr.w	r3, [r8]
 8003a76:	461c      	mov	r4, r3
 8003a78:	bb44      	cbnz	r4, 8003acc <_malloc_r+0x88>
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f7ff ffbf 	bl	8003a00 <sbrk_aligned>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	4604      	mov	r4, r0
 8003a86:	d158      	bne.n	8003b3a <_malloc_r+0xf6>
 8003a88:	f8d8 4000 	ldr.w	r4, [r8]
 8003a8c:	4627      	mov	r7, r4
 8003a8e:	2f00      	cmp	r7, #0
 8003a90:	d143      	bne.n	8003b1a <_malloc_r+0xd6>
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d04b      	beq.n	8003b2e <_malloc_r+0xea>
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	4639      	mov	r1, r7
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	eb04 0903 	add.w	r9, r4, r3
 8003aa0:	f000 fc5a 	bl	8004358 <_sbrk_r>
 8003aa4:	4581      	cmp	r9, r0
 8003aa6:	d142      	bne.n	8003b2e <_malloc_r+0xea>
 8003aa8:	6821      	ldr	r1, [r4, #0]
 8003aaa:	1a6d      	subs	r5, r5, r1
 8003aac:	4629      	mov	r1, r5
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff ffa6 	bl	8003a00 <sbrk_aligned>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d03a      	beq.n	8003b2e <_malloc_r+0xea>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	442b      	add	r3, r5
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	bb62      	cbnz	r2, 8003b20 <_malloc_r+0xdc>
 8003ac6:	f8c8 7000 	str.w	r7, [r8]
 8003aca:	e00f      	b.n	8003aec <_malloc_r+0xa8>
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	1b52      	subs	r2, r2, r5
 8003ad0:	d420      	bmi.n	8003b14 <_malloc_r+0xd0>
 8003ad2:	2a0b      	cmp	r2, #11
 8003ad4:	d917      	bls.n	8003b06 <_malloc_r+0xc2>
 8003ad6:	1961      	adds	r1, r4, r5
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	6025      	str	r5, [r4, #0]
 8003adc:	bf18      	it	ne
 8003ade:	6059      	strne	r1, [r3, #4]
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	bf08      	it	eq
 8003ae4:	f8c8 1000 	streq.w	r1, [r8]
 8003ae8:	5162      	str	r2, [r4, r5]
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 f82f 	bl	8003b50 <__malloc_unlock>
 8003af2:	f104 000b 	add.w	r0, r4, #11
 8003af6:	1d23      	adds	r3, r4, #4
 8003af8:	f020 0007 	bic.w	r0, r0, #7
 8003afc:	1ac2      	subs	r2, r0, r3
 8003afe:	bf1c      	itt	ne
 8003b00:	1a1b      	subne	r3, r3, r0
 8003b02:	50a3      	strne	r3, [r4, r2]
 8003b04:	e7af      	b.n	8003a66 <_malloc_r+0x22>
 8003b06:	6862      	ldr	r2, [r4, #4]
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	bf0c      	ite	eq
 8003b0c:	f8c8 2000 	streq.w	r2, [r8]
 8003b10:	605a      	strne	r2, [r3, #4]
 8003b12:	e7eb      	b.n	8003aec <_malloc_r+0xa8>
 8003b14:	4623      	mov	r3, r4
 8003b16:	6864      	ldr	r4, [r4, #4]
 8003b18:	e7ae      	b.n	8003a78 <_malloc_r+0x34>
 8003b1a:	463c      	mov	r4, r7
 8003b1c:	687f      	ldr	r7, [r7, #4]
 8003b1e:	e7b6      	b.n	8003a8e <_malloc_r+0x4a>
 8003b20:	461a      	mov	r2, r3
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d1fb      	bne.n	8003b20 <_malloc_r+0xdc>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6053      	str	r3, [r2, #4]
 8003b2c:	e7de      	b.n	8003aec <_malloc_r+0xa8>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	6033      	str	r3, [r6, #0]
 8003b32:	4630      	mov	r0, r6
 8003b34:	f000 f80c 	bl	8003b50 <__malloc_unlock>
 8003b38:	e794      	b.n	8003a64 <_malloc_r+0x20>
 8003b3a:	6005      	str	r5, [r0, #0]
 8003b3c:	e7d6      	b.n	8003aec <_malloc_r+0xa8>
 8003b3e:	bf00      	nop
 8003b40:	2000026c 	.word	0x2000026c

08003b44 <__malloc_lock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	@ (8003b4c <__malloc_lock+0x8>)
 8003b46:	f7ff bf0e 	b.w	8003966 <__retarget_lock_acquire_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000264 	.word	0x20000264

08003b50 <__malloc_unlock>:
 8003b50:	4801      	ldr	r0, [pc, #4]	@ (8003b58 <__malloc_unlock+0x8>)
 8003b52:	f7ff bf09 	b.w	8003968 <__retarget_lock_release_recursive>
 8003b56:	bf00      	nop
 8003b58:	20000264 	.word	0x20000264

08003b5c <__sfputc_r>:
 8003b5c:	6893      	ldr	r3, [r2, #8]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	b410      	push	{r4}
 8003b64:	6093      	str	r3, [r2, #8]
 8003b66:	da08      	bge.n	8003b7a <__sfputc_r+0x1e>
 8003b68:	6994      	ldr	r4, [r2, #24]
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	db01      	blt.n	8003b72 <__sfputc_r+0x16>
 8003b6e:	290a      	cmp	r1, #10
 8003b70:	d103      	bne.n	8003b7a <__sfputc_r+0x1e>
 8003b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b76:	f7ff bde8 	b.w	800374a <__swbuf_r>
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	1c58      	adds	r0, r3, #1
 8003b7e:	6010      	str	r0, [r2, #0]
 8003b80:	7019      	strb	r1, [r3, #0]
 8003b82:	4608      	mov	r0, r1
 8003b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <__sfputs_r>:
 8003b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	460f      	mov	r7, r1
 8003b90:	4614      	mov	r4, r2
 8003b92:	18d5      	adds	r5, r2, r3
 8003b94:	42ac      	cmp	r4, r5
 8003b96:	d101      	bne.n	8003b9c <__sfputs_r+0x12>
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e007      	b.n	8003bac <__sfputs_r+0x22>
 8003b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba0:	463a      	mov	r2, r7
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f7ff ffda 	bl	8003b5c <__sfputc_r>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d1f3      	bne.n	8003b94 <__sfputs_r+0xa>
 8003bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bb0 <_vfiprintf_r>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	b09d      	sub	sp, #116	@ 0x74
 8003bb8:	4614      	mov	r4, r2
 8003bba:	4698      	mov	r8, r3
 8003bbc:	4606      	mov	r6, r0
 8003bbe:	b118      	cbz	r0, 8003bc8 <_vfiprintf_r+0x18>
 8003bc0:	6a03      	ldr	r3, [r0, #32]
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <_vfiprintf_r+0x18>
 8003bc4:	f7ff fcd8 	bl	8003578 <__sinit>
 8003bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bca:	07d9      	lsls	r1, r3, #31
 8003bcc:	d405      	bmi.n	8003bda <_vfiprintf_r+0x2a>
 8003bce:	89ab      	ldrh	r3, [r5, #12]
 8003bd0:	059a      	lsls	r2, r3, #22
 8003bd2:	d402      	bmi.n	8003bda <_vfiprintf_r+0x2a>
 8003bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bd6:	f7ff fec6 	bl	8003966 <__retarget_lock_acquire_recursive>
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	d501      	bpl.n	8003be4 <_vfiprintf_r+0x34>
 8003be0:	692b      	ldr	r3, [r5, #16]
 8003be2:	b99b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x5c>
 8003be4:	4629      	mov	r1, r5
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff fdee 	bl	80037c8 <__swsetup_r>
 8003bec:	b170      	cbz	r0, 8003c0c <_vfiprintf_r+0x5c>
 8003bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bf0:	07dc      	lsls	r4, r3, #31
 8003bf2:	d504      	bpl.n	8003bfe <_vfiprintf_r+0x4e>
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	b01d      	add	sp, #116	@ 0x74
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	89ab      	ldrh	r3, [r5, #12]
 8003c00:	0598      	lsls	r0, r3, #22
 8003c02:	d4f7      	bmi.n	8003bf4 <_vfiprintf_r+0x44>
 8003c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c06:	f7ff feaf 	bl	8003968 <__retarget_lock_release_recursive>
 8003c0a:	e7f3      	b.n	8003bf4 <_vfiprintf_r+0x44>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c10:	2320      	movs	r3, #32
 8003c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c1a:	2330      	movs	r3, #48	@ 0x30
 8003c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003dcc <_vfiprintf_r+0x21c>
 8003c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c24:	f04f 0901 	mov.w	r9, #1
 8003c28:	4623      	mov	r3, r4
 8003c2a:	469a      	mov	sl, r3
 8003c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c30:	b10a      	cbz	r2, 8003c36 <_vfiprintf_r+0x86>
 8003c32:	2a25      	cmp	r2, #37	@ 0x25
 8003c34:	d1f9      	bne.n	8003c2a <_vfiprintf_r+0x7a>
 8003c36:	ebba 0b04 	subs.w	fp, sl, r4
 8003c3a:	d00b      	beq.n	8003c54 <_vfiprintf_r+0xa4>
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	4622      	mov	r2, r4
 8003c40:	4629      	mov	r1, r5
 8003c42:	4630      	mov	r0, r6
 8003c44:	f7ff ffa1 	bl	8003b8a <__sfputs_r>
 8003c48:	3001      	adds	r0, #1
 8003c4a:	f000 80a7 	beq.w	8003d9c <_vfiprintf_r+0x1ec>
 8003c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c50:	445a      	add	r2, fp
 8003c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c54:	f89a 3000 	ldrb.w	r3, [sl]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 809f 	beq.w	8003d9c <_vfiprintf_r+0x1ec>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c68:	f10a 0a01 	add.w	sl, sl, #1
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c76:	4654      	mov	r4, sl
 8003c78:	2205      	movs	r2, #5
 8003c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7e:	4853      	ldr	r0, [pc, #332]	@ (8003dcc <_vfiprintf_r+0x21c>)
 8003c80:	f7fc faae 	bl	80001e0 <memchr>
 8003c84:	9a04      	ldr	r2, [sp, #16]
 8003c86:	b9d8      	cbnz	r0, 8003cc0 <_vfiprintf_r+0x110>
 8003c88:	06d1      	lsls	r1, r2, #27
 8003c8a:	bf44      	itt	mi
 8003c8c:	2320      	movmi	r3, #32
 8003c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c92:	0713      	lsls	r3, r2, #28
 8003c94:	bf44      	itt	mi
 8003c96:	232b      	movmi	r3, #43	@ 0x2b
 8003c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ca2:	d015      	beq.n	8003cd0 <_vfiprintf_r+0x120>
 8003ca4:	9a07      	ldr	r2, [sp, #28]
 8003ca6:	4654      	mov	r4, sl
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f04f 0c0a 	mov.w	ip, #10
 8003cae:	4621      	mov	r1, r4
 8003cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb4:	3b30      	subs	r3, #48	@ 0x30
 8003cb6:	2b09      	cmp	r3, #9
 8003cb8:	d94b      	bls.n	8003d52 <_vfiprintf_r+0x1a2>
 8003cba:	b1b0      	cbz	r0, 8003cea <_vfiprintf_r+0x13a>
 8003cbc:	9207      	str	r2, [sp, #28]
 8003cbe:	e014      	b.n	8003cea <_vfiprintf_r+0x13a>
 8003cc0:	eba0 0308 	sub.w	r3, r0, r8
 8003cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	9304      	str	r3, [sp, #16]
 8003ccc:	46a2      	mov	sl, r4
 8003cce:	e7d2      	b.n	8003c76 <_vfiprintf_r+0xc6>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	1d19      	adds	r1, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	9103      	str	r1, [sp, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bfbb      	ittet	lt
 8003cdc:	425b      	neglt	r3, r3
 8003cde:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce2:	9307      	strge	r3, [sp, #28]
 8003ce4:	9307      	strlt	r3, [sp, #28]
 8003ce6:	bfb8      	it	lt
 8003ce8:	9204      	strlt	r2, [sp, #16]
 8003cea:	7823      	ldrb	r3, [r4, #0]
 8003cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cee:	d10a      	bne.n	8003d06 <_vfiprintf_r+0x156>
 8003cf0:	7863      	ldrb	r3, [r4, #1]
 8003cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cf4:	d132      	bne.n	8003d5c <_vfiprintf_r+0x1ac>
 8003cf6:	9b03      	ldr	r3, [sp, #12]
 8003cf8:	1d1a      	adds	r2, r3, #4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	9203      	str	r2, [sp, #12]
 8003cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d02:	3402      	adds	r4, #2
 8003d04:	9305      	str	r3, [sp, #20]
 8003d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ddc <_vfiprintf_r+0x22c>
 8003d0a:	7821      	ldrb	r1, [r4, #0]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	4650      	mov	r0, sl
 8003d10:	f7fc fa66 	bl	80001e0 <memchr>
 8003d14:	b138      	cbz	r0, 8003d26 <_vfiprintf_r+0x176>
 8003d16:	9b04      	ldr	r3, [sp, #16]
 8003d18:	eba0 000a 	sub.w	r0, r0, sl
 8003d1c:	2240      	movs	r2, #64	@ 0x40
 8003d1e:	4082      	lsls	r2, r0
 8003d20:	4313      	orrs	r3, r2
 8003d22:	3401      	adds	r4, #1
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d2a:	4829      	ldr	r0, [pc, #164]	@ (8003dd0 <_vfiprintf_r+0x220>)
 8003d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d30:	2206      	movs	r2, #6
 8003d32:	f7fc fa55 	bl	80001e0 <memchr>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d03f      	beq.n	8003dba <_vfiprintf_r+0x20a>
 8003d3a:	4b26      	ldr	r3, [pc, #152]	@ (8003dd4 <_vfiprintf_r+0x224>)
 8003d3c:	bb1b      	cbnz	r3, 8003d86 <_vfiprintf_r+0x1d6>
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	3307      	adds	r3, #7
 8003d42:	f023 0307 	bic.w	r3, r3, #7
 8003d46:	3308      	adds	r3, #8
 8003d48:	9303      	str	r3, [sp, #12]
 8003d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d4c:	443b      	add	r3, r7
 8003d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d50:	e76a      	b.n	8003c28 <_vfiprintf_r+0x78>
 8003d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d56:	460c      	mov	r4, r1
 8003d58:	2001      	movs	r0, #1
 8003d5a:	e7a8      	b.n	8003cae <_vfiprintf_r+0xfe>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	3401      	adds	r4, #1
 8003d60:	9305      	str	r3, [sp, #20]
 8003d62:	4619      	mov	r1, r3
 8003d64:	f04f 0c0a 	mov.w	ip, #10
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d6e:	3a30      	subs	r2, #48	@ 0x30
 8003d70:	2a09      	cmp	r2, #9
 8003d72:	d903      	bls.n	8003d7c <_vfiprintf_r+0x1cc>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0c6      	beq.n	8003d06 <_vfiprintf_r+0x156>
 8003d78:	9105      	str	r1, [sp, #20]
 8003d7a:	e7c4      	b.n	8003d06 <_vfiprintf_r+0x156>
 8003d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d80:	4604      	mov	r4, r0
 8003d82:	2301      	movs	r3, #1
 8003d84:	e7f0      	b.n	8003d68 <_vfiprintf_r+0x1b8>
 8003d86:	ab03      	add	r3, sp, #12
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	462a      	mov	r2, r5
 8003d8c:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <_vfiprintf_r+0x228>)
 8003d8e:	a904      	add	r1, sp, #16
 8003d90:	4630      	mov	r0, r6
 8003d92:	f3af 8000 	nop.w
 8003d96:	4607      	mov	r7, r0
 8003d98:	1c78      	adds	r0, r7, #1
 8003d9a:	d1d6      	bne.n	8003d4a <_vfiprintf_r+0x19a>
 8003d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d9e:	07d9      	lsls	r1, r3, #31
 8003da0:	d405      	bmi.n	8003dae <_vfiprintf_r+0x1fe>
 8003da2:	89ab      	ldrh	r3, [r5, #12]
 8003da4:	059a      	lsls	r2, r3, #22
 8003da6:	d402      	bmi.n	8003dae <_vfiprintf_r+0x1fe>
 8003da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003daa:	f7ff fddd 	bl	8003968 <__retarget_lock_release_recursive>
 8003dae:	89ab      	ldrh	r3, [r5, #12]
 8003db0:	065b      	lsls	r3, r3, #25
 8003db2:	f53f af1f 	bmi.w	8003bf4 <_vfiprintf_r+0x44>
 8003db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003db8:	e71e      	b.n	8003bf8 <_vfiprintf_r+0x48>
 8003dba:	ab03      	add	r3, sp, #12
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	462a      	mov	r2, r5
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <_vfiprintf_r+0x228>)
 8003dc2:	a904      	add	r1, sp, #16
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 f879 	bl	8003ebc <_printf_i>
 8003dca:	e7e4      	b.n	8003d96 <_vfiprintf_r+0x1e6>
 8003dcc:	080043cc 	.word	0x080043cc
 8003dd0:	080043d6 	.word	0x080043d6
 8003dd4:	00000000 	.word	0x00000000
 8003dd8:	08003b8b 	.word	0x08003b8b
 8003ddc:	080043d2 	.word	0x080043d2

08003de0 <_printf_common>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	4616      	mov	r6, r2
 8003de6:	4698      	mov	r8, r3
 8003de8:	688a      	ldr	r2, [r1, #8]
 8003dea:	690b      	ldr	r3, [r1, #16]
 8003dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003df0:	4293      	cmp	r3, r2
 8003df2:	bfb8      	it	lt
 8003df4:	4613      	movlt	r3, r2
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dfc:	4607      	mov	r7, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	b10a      	cbz	r2, 8003e06 <_printf_common+0x26>
 8003e02:	3301      	adds	r3, #1
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0699      	lsls	r1, r3, #26
 8003e0a:	bf42      	ittt	mi
 8003e0c:	6833      	ldrmi	r3, [r6, #0]
 8003e0e:	3302      	addmi	r3, #2
 8003e10:	6033      	strmi	r3, [r6, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	f015 0506 	ands.w	r5, r5, #6
 8003e18:	d106      	bne.n	8003e28 <_printf_common+0x48>
 8003e1a:	f104 0a19 	add.w	sl, r4, #25
 8003e1e:	68e3      	ldr	r3, [r4, #12]
 8003e20:	6832      	ldr	r2, [r6, #0]
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	42ab      	cmp	r3, r5
 8003e26:	dc26      	bgt.n	8003e76 <_printf_common+0x96>
 8003e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	3b00      	subs	r3, #0
 8003e30:	bf18      	it	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	0692      	lsls	r2, r2, #26
 8003e36:	d42b      	bmi.n	8003e90 <_printf_common+0xb0>
 8003e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	4638      	mov	r0, r7
 8003e40:	47c8      	blx	r9
 8003e42:	3001      	adds	r0, #1
 8003e44:	d01e      	beq.n	8003e84 <_printf_common+0xa4>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	bf02      	ittt	eq
 8003e52:	68e5      	ldreq	r5, [r4, #12]
 8003e54:	6833      	ldreq	r3, [r6, #0]
 8003e56:	1aed      	subeq	r5, r5, r3
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	bf0c      	ite	eq
 8003e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e60:	2500      	movne	r5, #0
 8003e62:	4293      	cmp	r3, r2
 8003e64:	bfc4      	itt	gt
 8003e66:	1a9b      	subgt	r3, r3, r2
 8003e68:	18ed      	addgt	r5, r5, r3
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	341a      	adds	r4, #26
 8003e6e:	42b5      	cmp	r5, r6
 8003e70:	d11a      	bne.n	8003ea8 <_printf_common+0xc8>
 8003e72:	2000      	movs	r0, #0
 8003e74:	e008      	b.n	8003e88 <_printf_common+0xa8>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4652      	mov	r2, sl
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	47c8      	blx	r9
 8003e80:	3001      	adds	r0, #1
 8003e82:	d103      	bne.n	8003e8c <_printf_common+0xac>
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8c:	3501      	adds	r5, #1
 8003e8e:	e7c6      	b.n	8003e1e <_printf_common+0x3e>
 8003e90:	18e1      	adds	r1, r4, r3
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	2030      	movs	r0, #48	@ 0x30
 8003e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e9a:	4422      	add	r2, r4
 8003e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	e7c7      	b.n	8003e38 <_printf_common+0x58>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4641      	mov	r1, r8
 8003eae:	4638      	mov	r0, r7
 8003eb0:	47c8      	blx	r9
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0e6      	beq.n	8003e84 <_printf_common+0xa4>
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7d9      	b.n	8003e6e <_printf_common+0x8e>
	...

08003ebc <_printf_i>:
 8003ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec0:	7e0f      	ldrb	r7, [r1, #24]
 8003ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ec4:	2f78      	cmp	r7, #120	@ 0x78
 8003ec6:	4691      	mov	r9, r2
 8003ec8:	4680      	mov	r8, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	469a      	mov	sl, r3
 8003ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ed2:	d807      	bhi.n	8003ee4 <_printf_i+0x28>
 8003ed4:	2f62      	cmp	r7, #98	@ 0x62
 8003ed6:	d80a      	bhi.n	8003eee <_printf_i+0x32>
 8003ed8:	2f00      	cmp	r7, #0
 8003eda:	f000 80d1 	beq.w	8004080 <_printf_i+0x1c4>
 8003ede:	2f58      	cmp	r7, #88	@ 0x58
 8003ee0:	f000 80b8 	beq.w	8004054 <_printf_i+0x198>
 8003ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eec:	e03a      	b.n	8003f64 <_printf_i+0xa8>
 8003eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ef2:	2b15      	cmp	r3, #21
 8003ef4:	d8f6      	bhi.n	8003ee4 <_printf_i+0x28>
 8003ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8003efc <_printf_i+0x40>)
 8003ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003efc:	08003f55 	.word	0x08003f55
 8003f00:	08003f69 	.word	0x08003f69
 8003f04:	08003ee5 	.word	0x08003ee5
 8003f08:	08003ee5 	.word	0x08003ee5
 8003f0c:	08003ee5 	.word	0x08003ee5
 8003f10:	08003ee5 	.word	0x08003ee5
 8003f14:	08003f69 	.word	0x08003f69
 8003f18:	08003ee5 	.word	0x08003ee5
 8003f1c:	08003ee5 	.word	0x08003ee5
 8003f20:	08003ee5 	.word	0x08003ee5
 8003f24:	08003ee5 	.word	0x08003ee5
 8003f28:	08004067 	.word	0x08004067
 8003f2c:	08003f93 	.word	0x08003f93
 8003f30:	08004021 	.word	0x08004021
 8003f34:	08003ee5 	.word	0x08003ee5
 8003f38:	08003ee5 	.word	0x08003ee5
 8003f3c:	08004089 	.word	0x08004089
 8003f40:	08003ee5 	.word	0x08003ee5
 8003f44:	08003f93 	.word	0x08003f93
 8003f48:	08003ee5 	.word	0x08003ee5
 8003f4c:	08003ee5 	.word	0x08003ee5
 8003f50:	08004029 	.word	0x08004029
 8003f54:	6833      	ldr	r3, [r6, #0]
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6032      	str	r2, [r6, #0]
 8003f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09c      	b.n	80040a2 <_printf_i+0x1e6>
 8003f68:	6833      	ldr	r3, [r6, #0]
 8003f6a:	6820      	ldr	r0, [r4, #0]
 8003f6c:	1d19      	adds	r1, r3, #4
 8003f6e:	6031      	str	r1, [r6, #0]
 8003f70:	0606      	lsls	r6, r0, #24
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0xbc>
 8003f74:	681d      	ldr	r5, [r3, #0]
 8003f76:	e003      	b.n	8003f80 <_printf_i+0xc4>
 8003f78:	0645      	lsls	r5, r0, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0xb8>
 8003f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f80:	2d00      	cmp	r5, #0
 8003f82:	da03      	bge.n	8003f8c <_printf_i+0xd0>
 8003f84:	232d      	movs	r3, #45	@ 0x2d
 8003f86:	426d      	negs	r5, r5
 8003f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f8c:	4858      	ldr	r0, [pc, #352]	@ (80040f0 <_printf_i+0x234>)
 8003f8e:	230a      	movs	r3, #10
 8003f90:	e011      	b.n	8003fb6 <_printf_i+0xfa>
 8003f92:	6821      	ldr	r1, [r4, #0]
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	0608      	lsls	r0, r1, #24
 8003f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f9c:	d402      	bmi.n	8003fa4 <_printf_i+0xe8>
 8003f9e:	0649      	lsls	r1, r1, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2ad      	uxthmi	r5, r5
 8003fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fa6:	4852      	ldr	r0, [pc, #328]	@ (80040f0 <_printf_i+0x234>)
 8003fa8:	6033      	str	r3, [r6, #0]
 8003faa:	bf14      	ite	ne
 8003fac:	230a      	movne	r3, #10
 8003fae:	2308      	moveq	r3, #8
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fb6:	6866      	ldr	r6, [r4, #4]
 8003fb8:	60a6      	str	r6, [r4, #8]
 8003fba:	2e00      	cmp	r6, #0
 8003fbc:	db05      	blt.n	8003fca <_printf_i+0x10e>
 8003fbe:	6821      	ldr	r1, [r4, #0]
 8003fc0:	432e      	orrs	r6, r5
 8003fc2:	f021 0104 	bic.w	r1, r1, #4
 8003fc6:	6021      	str	r1, [r4, #0]
 8003fc8:	d04b      	beq.n	8004062 <_printf_i+0x1a6>
 8003fca:	4616      	mov	r6, r2
 8003fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8003fd4:	5dc7      	ldrb	r7, [r0, r7]
 8003fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fda:	462f      	mov	r7, r5
 8003fdc:	42bb      	cmp	r3, r7
 8003fde:	460d      	mov	r5, r1
 8003fe0:	d9f4      	bls.n	8003fcc <_printf_i+0x110>
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d10b      	bne.n	8003ffe <_printf_i+0x142>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	07df      	lsls	r7, r3, #31
 8003fea:	d508      	bpl.n	8003ffe <_printf_i+0x142>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	6861      	ldr	r1, [r4, #4]
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	bfde      	ittt	le
 8003ff4:	2330      	movle	r3, #48	@ 0x30
 8003ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ffe:	1b92      	subs	r2, r2, r6
 8004000:	6122      	str	r2, [r4, #16]
 8004002:	f8cd a000 	str.w	sl, [sp]
 8004006:	464b      	mov	r3, r9
 8004008:	aa03      	add	r2, sp, #12
 800400a:	4621      	mov	r1, r4
 800400c:	4640      	mov	r0, r8
 800400e:	f7ff fee7 	bl	8003de0 <_printf_common>
 8004012:	3001      	adds	r0, #1
 8004014:	d14a      	bne.n	80040ac <_printf_i+0x1f0>
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	b004      	add	sp, #16
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	4832      	ldr	r0, [pc, #200]	@ (80040f4 <_printf_i+0x238>)
 800402a:	2778      	movs	r7, #120	@ 0x78
 800402c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	6831      	ldr	r1, [r6, #0]
 8004034:	061f      	lsls	r7, r3, #24
 8004036:	f851 5b04 	ldr.w	r5, [r1], #4
 800403a:	d402      	bmi.n	8004042 <_printf_i+0x186>
 800403c:	065f      	lsls	r7, r3, #25
 800403e:	bf48      	it	mi
 8004040:	b2ad      	uxthmi	r5, r5
 8004042:	6031      	str	r1, [r6, #0]
 8004044:	07d9      	lsls	r1, r3, #31
 8004046:	bf44      	itt	mi
 8004048:	f043 0320 	orrmi.w	r3, r3, #32
 800404c:	6023      	strmi	r3, [r4, #0]
 800404e:	b11d      	cbz	r5, 8004058 <_printf_i+0x19c>
 8004050:	2310      	movs	r3, #16
 8004052:	e7ad      	b.n	8003fb0 <_printf_i+0xf4>
 8004054:	4826      	ldr	r0, [pc, #152]	@ (80040f0 <_printf_i+0x234>)
 8004056:	e7e9      	b.n	800402c <_printf_i+0x170>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f023 0320 	bic.w	r3, r3, #32
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	e7f6      	b.n	8004050 <_printf_i+0x194>
 8004062:	4616      	mov	r6, r2
 8004064:	e7bd      	b.n	8003fe2 <_printf_i+0x126>
 8004066:	6833      	ldr	r3, [r6, #0]
 8004068:	6825      	ldr	r5, [r4, #0]
 800406a:	6961      	ldr	r1, [r4, #20]
 800406c:	1d18      	adds	r0, r3, #4
 800406e:	6030      	str	r0, [r6, #0]
 8004070:	062e      	lsls	r6, r5, #24
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	d501      	bpl.n	800407a <_printf_i+0x1be>
 8004076:	6019      	str	r1, [r3, #0]
 8004078:	e002      	b.n	8004080 <_printf_i+0x1c4>
 800407a:	0668      	lsls	r0, r5, #25
 800407c:	d5fb      	bpl.n	8004076 <_printf_i+0x1ba>
 800407e:	8019      	strh	r1, [r3, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	6123      	str	r3, [r4, #16]
 8004084:	4616      	mov	r6, r2
 8004086:	e7bc      	b.n	8004002 <_printf_i+0x146>
 8004088:	6833      	ldr	r3, [r6, #0]
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	6032      	str	r2, [r6, #0]
 800408e:	681e      	ldr	r6, [r3, #0]
 8004090:	6862      	ldr	r2, [r4, #4]
 8004092:	2100      	movs	r1, #0
 8004094:	4630      	mov	r0, r6
 8004096:	f7fc f8a3 	bl	80001e0 <memchr>
 800409a:	b108      	cbz	r0, 80040a0 <_printf_i+0x1e4>
 800409c:	1b80      	subs	r0, r0, r6
 800409e:	6060      	str	r0, [r4, #4]
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	2300      	movs	r3, #0
 80040a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040aa:	e7aa      	b.n	8004002 <_printf_i+0x146>
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	4632      	mov	r2, r6
 80040b0:	4649      	mov	r1, r9
 80040b2:	4640      	mov	r0, r8
 80040b4:	47d0      	blx	sl
 80040b6:	3001      	adds	r0, #1
 80040b8:	d0ad      	beq.n	8004016 <_printf_i+0x15a>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	079b      	lsls	r3, r3, #30
 80040be:	d413      	bmi.n	80040e8 <_printf_i+0x22c>
 80040c0:	68e0      	ldr	r0, [r4, #12]
 80040c2:	9b03      	ldr	r3, [sp, #12]
 80040c4:	4298      	cmp	r0, r3
 80040c6:	bfb8      	it	lt
 80040c8:	4618      	movlt	r0, r3
 80040ca:	e7a6      	b.n	800401a <_printf_i+0x15e>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4632      	mov	r2, r6
 80040d0:	4649      	mov	r1, r9
 80040d2:	4640      	mov	r0, r8
 80040d4:	47d0      	blx	sl
 80040d6:	3001      	adds	r0, #1
 80040d8:	d09d      	beq.n	8004016 <_printf_i+0x15a>
 80040da:	3501      	adds	r5, #1
 80040dc:	68e3      	ldr	r3, [r4, #12]
 80040de:	9903      	ldr	r1, [sp, #12]
 80040e0:	1a5b      	subs	r3, r3, r1
 80040e2:	42ab      	cmp	r3, r5
 80040e4:	dcf2      	bgt.n	80040cc <_printf_i+0x210>
 80040e6:	e7eb      	b.n	80040c0 <_printf_i+0x204>
 80040e8:	2500      	movs	r5, #0
 80040ea:	f104 0619 	add.w	r6, r4, #25
 80040ee:	e7f5      	b.n	80040dc <_printf_i+0x220>
 80040f0:	080043dd 	.word	0x080043dd
 80040f4:	080043ee 	.word	0x080043ee

080040f8 <__sflush_r>:
 80040f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	0716      	lsls	r6, r2, #28
 8004102:	4605      	mov	r5, r0
 8004104:	460c      	mov	r4, r1
 8004106:	d454      	bmi.n	80041b2 <__sflush_r+0xba>
 8004108:	684b      	ldr	r3, [r1, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	dc02      	bgt.n	8004114 <__sflush_r+0x1c>
 800410e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	dd48      	ble.n	80041a6 <__sflush_r+0xae>
 8004114:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004116:	2e00      	cmp	r6, #0
 8004118:	d045      	beq.n	80041a6 <__sflush_r+0xae>
 800411a:	2300      	movs	r3, #0
 800411c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004120:	682f      	ldr	r7, [r5, #0]
 8004122:	6a21      	ldr	r1, [r4, #32]
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	d030      	beq.n	800418a <__sflush_r+0x92>
 8004128:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	0759      	lsls	r1, r3, #29
 800412e:	d505      	bpl.n	800413c <__sflush_r+0x44>
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004136:	b10b      	cbz	r3, 800413c <__sflush_r+0x44>
 8004138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004140:	6a21      	ldr	r1, [r4, #32]
 8004142:	4628      	mov	r0, r5
 8004144:	47b0      	blx	r6
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	d106      	bne.n	800415a <__sflush_r+0x62>
 800414c:	6829      	ldr	r1, [r5, #0]
 800414e:	291d      	cmp	r1, #29
 8004150:	d82b      	bhi.n	80041aa <__sflush_r+0xb2>
 8004152:	4a2a      	ldr	r2, [pc, #168]	@ (80041fc <__sflush_r+0x104>)
 8004154:	40ca      	lsrs	r2, r1
 8004156:	07d6      	lsls	r6, r2, #31
 8004158:	d527      	bpl.n	80041aa <__sflush_r+0xb2>
 800415a:	2200      	movs	r2, #0
 800415c:	6062      	str	r2, [r4, #4]
 800415e:	04d9      	lsls	r1, r3, #19
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	6022      	str	r2, [r4, #0]
 8004164:	d504      	bpl.n	8004170 <__sflush_r+0x78>
 8004166:	1c42      	adds	r2, r0, #1
 8004168:	d101      	bne.n	800416e <__sflush_r+0x76>
 800416a:	682b      	ldr	r3, [r5, #0]
 800416c:	b903      	cbnz	r3, 8004170 <__sflush_r+0x78>
 800416e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004172:	602f      	str	r7, [r5, #0]
 8004174:	b1b9      	cbz	r1, 80041a6 <__sflush_r+0xae>
 8004176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800417a:	4299      	cmp	r1, r3
 800417c:	d002      	beq.n	8004184 <__sflush_r+0x8c>
 800417e:	4628      	mov	r0, r5
 8004180:	f7ff fbf4 	bl	800396c <_free_r>
 8004184:	2300      	movs	r3, #0
 8004186:	6363      	str	r3, [r4, #52]	@ 0x34
 8004188:	e00d      	b.n	80041a6 <__sflush_r+0xae>
 800418a:	2301      	movs	r3, #1
 800418c:	4628      	mov	r0, r5
 800418e:	47b0      	blx	r6
 8004190:	4602      	mov	r2, r0
 8004192:	1c50      	adds	r0, r2, #1
 8004194:	d1c9      	bne.n	800412a <__sflush_r+0x32>
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0c6      	beq.n	800412a <__sflush_r+0x32>
 800419c:	2b1d      	cmp	r3, #29
 800419e:	d001      	beq.n	80041a4 <__sflush_r+0xac>
 80041a0:	2b16      	cmp	r3, #22
 80041a2:	d11e      	bne.n	80041e2 <__sflush_r+0xea>
 80041a4:	602f      	str	r7, [r5, #0]
 80041a6:	2000      	movs	r0, #0
 80041a8:	e022      	b.n	80041f0 <__sflush_r+0xf8>
 80041aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ae:	b21b      	sxth	r3, r3
 80041b0:	e01b      	b.n	80041ea <__sflush_r+0xf2>
 80041b2:	690f      	ldr	r7, [r1, #16]
 80041b4:	2f00      	cmp	r7, #0
 80041b6:	d0f6      	beq.n	80041a6 <__sflush_r+0xae>
 80041b8:	0793      	lsls	r3, r2, #30
 80041ba:	680e      	ldr	r6, [r1, #0]
 80041bc:	bf08      	it	eq
 80041be:	694b      	ldreq	r3, [r1, #20]
 80041c0:	600f      	str	r7, [r1, #0]
 80041c2:	bf18      	it	ne
 80041c4:	2300      	movne	r3, #0
 80041c6:	eba6 0807 	sub.w	r8, r6, r7
 80041ca:	608b      	str	r3, [r1, #8]
 80041cc:	f1b8 0f00 	cmp.w	r8, #0
 80041d0:	dde9      	ble.n	80041a6 <__sflush_r+0xae>
 80041d2:	6a21      	ldr	r1, [r4, #32]
 80041d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041d6:	4643      	mov	r3, r8
 80041d8:	463a      	mov	r2, r7
 80041da:	4628      	mov	r0, r5
 80041dc:	47b0      	blx	r6
 80041de:	2800      	cmp	r0, #0
 80041e0:	dc08      	bgt.n	80041f4 <__sflush_r+0xfc>
 80041e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041f4:	4407      	add	r7, r0
 80041f6:	eba8 0800 	sub.w	r8, r8, r0
 80041fa:	e7e7      	b.n	80041cc <__sflush_r+0xd4>
 80041fc:	20400001 	.word	0x20400001

08004200 <_fflush_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	690b      	ldr	r3, [r1, #16]
 8004204:	4605      	mov	r5, r0
 8004206:	460c      	mov	r4, r1
 8004208:	b913      	cbnz	r3, 8004210 <_fflush_r+0x10>
 800420a:	2500      	movs	r5, #0
 800420c:	4628      	mov	r0, r5
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	b118      	cbz	r0, 800421a <_fflush_r+0x1a>
 8004212:	6a03      	ldr	r3, [r0, #32]
 8004214:	b90b      	cbnz	r3, 800421a <_fflush_r+0x1a>
 8004216:	f7ff f9af 	bl	8003578 <__sinit>
 800421a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f3      	beq.n	800420a <_fflush_r+0xa>
 8004222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004224:	07d0      	lsls	r0, r2, #31
 8004226:	d404      	bmi.n	8004232 <_fflush_r+0x32>
 8004228:	0599      	lsls	r1, r3, #22
 800422a:	d402      	bmi.n	8004232 <_fflush_r+0x32>
 800422c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800422e:	f7ff fb9a 	bl	8003966 <__retarget_lock_acquire_recursive>
 8004232:	4628      	mov	r0, r5
 8004234:	4621      	mov	r1, r4
 8004236:	f7ff ff5f 	bl	80040f8 <__sflush_r>
 800423a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800423c:	07da      	lsls	r2, r3, #31
 800423e:	4605      	mov	r5, r0
 8004240:	d4e4      	bmi.n	800420c <_fflush_r+0xc>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	059b      	lsls	r3, r3, #22
 8004246:	d4e1      	bmi.n	800420c <_fflush_r+0xc>
 8004248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424a:	f7ff fb8d 	bl	8003968 <__retarget_lock_release_recursive>
 800424e:	e7dd      	b.n	800420c <_fflush_r+0xc>

08004250 <__swhatbuf_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	460c      	mov	r4, r1
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	2900      	cmp	r1, #0
 800425a:	b096      	sub	sp, #88	@ 0x58
 800425c:	4615      	mov	r5, r2
 800425e:	461e      	mov	r6, r3
 8004260:	da0d      	bge.n	800427e <__swhatbuf_r+0x2e>
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	bf14      	ite	ne
 800426e:	2340      	movne	r3, #64	@ 0x40
 8004270:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004274:	2000      	movs	r0, #0
 8004276:	6031      	str	r1, [r6, #0]
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	b016      	add	sp, #88	@ 0x58
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	466a      	mov	r2, sp
 8004280:	f000 f848 	bl	8004314 <_fstat_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	dbec      	blt.n	8004262 <__swhatbuf_r+0x12>
 8004288:	9901      	ldr	r1, [sp, #4]
 800428a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800428e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004292:	4259      	negs	r1, r3
 8004294:	4159      	adcs	r1, r3
 8004296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800429a:	e7eb      	b.n	8004274 <__swhatbuf_r+0x24>

0800429c <__smakebuf_r>:
 800429c:	898b      	ldrh	r3, [r1, #12]
 800429e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a0:	079d      	lsls	r5, r3, #30
 80042a2:	4606      	mov	r6, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	d507      	bpl.n	80042b8 <__smakebuf_r+0x1c>
 80042a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	2301      	movs	r3, #1
 80042b2:	6163      	str	r3, [r4, #20]
 80042b4:	b003      	add	sp, #12
 80042b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b8:	ab01      	add	r3, sp, #4
 80042ba:	466a      	mov	r2, sp
 80042bc:	f7ff ffc8 	bl	8004250 <__swhatbuf_r>
 80042c0:	9f00      	ldr	r7, [sp, #0]
 80042c2:	4605      	mov	r5, r0
 80042c4:	4639      	mov	r1, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7ff fbbc 	bl	8003a44 <_malloc_r>
 80042cc:	b948      	cbnz	r0, 80042e2 <__smakebuf_r+0x46>
 80042ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d2:	059a      	lsls	r2, r3, #22
 80042d4:	d4ee      	bmi.n	80042b4 <__smakebuf_r+0x18>
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	f043 0302 	orr.w	r3, r3, #2
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	e7e2      	b.n	80042a8 <__smakebuf_r+0xc>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	6020      	str	r0, [r4, #0]
 80042e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x70>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f81d 	bl	8004338 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x70>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	431d      	orrs	r5, r3
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cf      	b.n	80042b4 <__smakebuf_r+0x18>

08004314 <_fstat_r>:
 8004314:	b538      	push	{r3, r4, r5, lr}
 8004316:	4d07      	ldr	r5, [pc, #28]	@ (8004334 <_fstat_r+0x20>)
 8004318:	2300      	movs	r3, #0
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	f7fc fc92 	bl	8000c4a <_fstat>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	d102      	bne.n	8004330 <_fstat_r+0x1c>
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	b103      	cbz	r3, 8004330 <_fstat_r+0x1c>
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	bd38      	pop	{r3, r4, r5, pc}
 8004332:	bf00      	nop
 8004334:	20000260 	.word	0x20000260

08004338 <_isatty_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	4d06      	ldr	r5, [pc, #24]	@ (8004354 <_isatty_r+0x1c>)
 800433c:	2300      	movs	r3, #0
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fc fc91 	bl	8000c6a <_isatty>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_isatty_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_isatty_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000260 	.word	0x20000260

08004358 <_sbrk_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d06      	ldr	r5, [pc, #24]	@ (8004374 <_sbrk_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fc9a 	bl	8000c9c <_sbrk>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_sbrk_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_sbrk_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000260 	.word	0x20000260

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
